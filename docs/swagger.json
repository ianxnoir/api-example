{
    "openapi": "3.0.0",
    "info": {
        "title": "VEP Fair Service API",
        "description": "VEP Fair Service API",
        "version": "1.0",
        "contact": {}
    },
    "tags": [
        {
            "name": "vep-fair",
            "description": ""
        }
    ],
    "servers": [
        {
            "description": "esd-aws-develop"
        },
        {
            "url": "",
            "description": "clouddev"
        },
        {
            "url": "",
            "description": "sit"
        },
        {
            "url": "",
            "description": "uat"
        },
        {
            "url": "",
            "description": "prd"
        }
    ],
    "components": {
        "schemas": {
            "SsoUidByFairCodeQueryDto": {
                "type": "object",
                "properties": {
                    "size": {
                        "type": "number",
                        "description": "Size of Buyer SsoUid",
                        "example": "10"
                    },
                    "fairCode": {
                        "type": "string",
                        "description": "fairCode",
                        "example": "hkjewellery"
                    }
                },
                "required": [
                    "size",
                    "fairCode"
                ]
            },
            "ValidationErrorDto": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "error code",
                        "example": "E0300100400"
                    },
                    "message": {
                        "type": "string",
                        "description": "error message",
                        "example": "Validation Error"
                    },
                    "details": {
                        "description": "array of validation error",
                        "example": [
                            "content should not be empty"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "timestamp": {
                        "type": "string",
                        "description": "timestamp",
                        "example": "2021-08-11T09:12:41.735Z"
                    }
                },
                "required": [
                    "code",
                    "message",
                    "details",
                    "timestamp"
                ]
            },
            "ValidationErrorResponseDto": {
                "type": "object",
                "properties": {
                    "error": {
                        "description": "Validation Error",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ValidationErrorDto"
                            }
                        ]
                    }
                },
                "required": [
                    "error"
                ]
            },
            "SearchFairParticipants": {
                "type": "object",
                "properties": {}
            },
            "C2MParticipantStatus": {
                "type": "object",
                "properties": {}
            },
            "buyerRegistrationSyncSNSDto": {
                "type": "object",
                "properties": {}
            },
            "updateStatusDto": {
                "type": "object",
                "properties": {}
            },
            "SbeEndpointRequestDto": {
                "type": "object",
                "properties": {
                    "vmsProjectCode": {
                        "type": "string",
                        "description": "vmsProjectCode",
                        "example": "007"
                    },
                    "vmsProjectYear": {
                        "type": "string",
                        "description": "vmsProjectYear",
                        "example": "2122"
                    },
                    "systemCode": {
                        "type": "string",
                        "description": "systemCode",
                        "example": "VEP"
                    },
                    "language": {
                        "type": "string",
                        "description": "language",
                        "example": "en / sc / tc"
                    },
                    "email": {
                        "type": "string",
                        "description": "email",
                        "example": "xxx@xxx.com"
                    }
                },
                "required": [
                    "vmsProjectCode",
                    "vmsProjectYear",
                    "systemCode"
                ]
            },
            "FilterSeminarCriteriaDto": {
                "type": "object",
                "properties": {
                    "firstCriteria": {
                        "type": "string"
                    },
                    "secondCriteria": {
                        "type": "string"
                    }
                },
                "required": [
                    "firstCriteria",
                    "secondCriteria"
                ]
            },
            "OptionalInfoDto": {
                "type": "object",
                "properties": {
                    "seminarId": {
                        "type": "string"
                    }
                },
                "required": [
                    "seminarId"
                ]
            },
            "GetSeminarsV2Dto": {
                "type": "object",
                "properties": {
                    "sbeParams": {
                        "$ref": "#/components/schemas/SbeEndpointRequestDto"
                    },
                    "criteria": {
                        "$ref": "#/components/schemas/FilterSeminarCriteriaDto"
                    },
                    "optionalInfo": {
                        "$ref": "#/components/schemas/OptionalInfoDto"
                    }
                },
                "required": [
                    "sbeParams",
                    "criteria",
                    "optionalInfo"
                ]
            },
            "FilterLayerDto": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "value"
                ]
            },
            "LogoPanelDto": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "logos": {
                        "type": "array",
                        "items": {
                            "type": "array"
                        }
                    }
                },
                "required": [
                    "title",
                    "logos"
                ]
            },
            "ConfSpeakerDtoCompany": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "logo": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "logo"
                ]
            },
            "ConfSpeakerOtherCompanyDto": {
                "type": "object",
                "properties": {
                    "companyName": {
                        "type": "string"
                    },
                    "position": {
                        "type": "string"
                    },
                    "logo": {
                        "type": "string"
                    }
                },
                "required": [
                    "companyName",
                    "position",
                    "logo"
                ]
            },
            "ConfSpeakerDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "title": {
                        "type": "string"
                    },
                    "avatar": {
                        "type": "string"
                    },
                    "profile": {
                        "type": "string"
                    },
                    "company": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ConfSpeakerDtoCompany"
                        }
                    },
                    "otherCompanies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ConfSpeakerOtherCompanyDto"
                        }
                    }
                },
                "required": [
                    "id",
                    "name",
                    "title",
                    "avatar",
                    "profile",
                    "company",
                    "otherCompanies"
                ]
            },
            "ConfSpeakerPanelDto": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "speakers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ConfSpeakerDto"
                        }
                    }
                },
                "required": [
                    "title",
                    "speakers"
                ]
            },
            "VideoDetailDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "nullable": true
                    },
                    "taskId": {
                        "type": "string",
                        "nullable": true
                    },
                    "transcodeStatus": {
                        "type": "string",
                        "enum": [
                            "IN_PROGRESS",
                            "FINISHED",
                            "CANCELLED"
                        ]
                    },
                    "videoStatus": {
                        "type": "string",
                        "enum": [
                            "USING",
                            "UNUSED",
                            "CANCELLED"
                        ]
                    },
                    "fileName": {
                        "type": "string",
                        "nullable": true
                    },
                    "fileUrl": {
                        "type": "string",
                        "nullable": true
                    },
                    "lastUpdatedBy": {
                        "type": "string",
                        "nullable": true
                    },
                    "lastUpdatedAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "creationTime": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "taskId",
                    "transcodeStatus",
                    "videoStatus",
                    "fileName",
                    "fileUrl",
                    "lastUpdatedBy",
                    "lastUpdatedAt",
                    "creationTime"
                ]
            },
            "KolDetailDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number"
                    },
                    "platformType": {
                        "type": "string",
                        "enum": [
                            "YOUTUBE",
                            "FACEBOOK",
                            "VIMEO",
                            "YOUKU",
                            "TENCENT",
                            "EXTERNAL_SITE"
                        ]
                    },
                    "platformId": {
                        "type": "string"
                    },
                    "platformUrl": {
                        "type": "string"
                    },
                    "playbackVideo": {
                        "$ref": "#/components/schemas/VideoDetailDto"
                    },
                    "creationTime": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "lastUpdateAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "lastUpdateBy": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "platformType",
                    "platformId",
                    "platformUrl",
                    "playbackVideo",
                    "creationTime",
                    "lastUpdateAt",
                    "lastUpdateBy"
                ]
            },
            "VodDetailDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number"
                    },
                    "language": {
                        "type": "string"
                    },
                    "defaultLanguage": {
                        "type": "boolean"
                    },
                    "liveVideo": {
                        "$ref": "#/components/schemas/VideoDetailDto"
                    },
                    "playbackVideo": {
                        "$ref": "#/components/schemas/VideoDetailDto"
                    },
                    "creationTime": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "lastUpdatedAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "lastUpdatedBy": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "language",
                    "defaultLanguage",
                    "liveVideo",
                    "playbackVideo",
                    "creationTime",
                    "lastUpdatedAt",
                    "lastUpdatedBy"
                ]
            },
            "RtmpDetailDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number"
                    },
                    "language": {
                        "type": "string"
                    },
                    "defaultLanguage": {
                        "type": "boolean"
                    },
                    "link": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string"
                    },
                    "liveUrl": {
                        "type": "string",
                        "nullable": true
                    },
                    "expiredAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "playbackVideo": {
                        "$ref": "#/components/schemas/VideoDetailDto"
                    },
                    "lastUpdatedBy": {
                        "type": "string"
                    },
                    "lastUpdatedAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "creationTime": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "language",
                    "defaultLanguage",
                    "link",
                    "key",
                    "liveUrl",
                    "expiredAt",
                    "playbackVideo",
                    "lastUpdatedBy",
                    "lastUpdatedAt",
                    "creationTime"
                ]
            },
            "EventDetailDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number"
                    },
                    "sbeSeminarId": {
                        "type": "string"
                    },
                    "streamingType": {
                        "type": "string",
                        "description": "can be 'KOL', 'VOD' or 'LIVE'"
                    },
                    "surveyLink": {
                        "type": "string",
                        "nullable": true
                    },
                    "pigeonholeSessionId": {
                        "type": "number",
                        "nullable": true
                    },
                    "pigeonholePasscode": {
                        "type": "string",
                        "nullable": true
                    },
                    "kol": {
                        "$ref": "#/components/schemas/KolDetailDto"
                    },
                    "vods": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VodDetailDto"
                        }
                    },
                    "rtmps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RtmpDetailDto"
                        }
                    },
                    "lastUpdatedBy": {
                        "type": "string"
                    },
                    "lastUpdatedAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "creationTime": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "isEnded": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "id",
                    "sbeSeminarId",
                    "streamingType",
                    "surveyLink",
                    "pigeonholeSessionId",
                    "pigeonholePasscode",
                    "kol",
                    "vods",
                    "rtmps",
                    "lastUpdatedBy",
                    "lastUpdatedAt",
                    "creationTime",
                    "isEnded"
                ]
            },
            "FindAllResultDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "displayStatus": {
                        "type": "boolean"
                    },
                    "formattedStartDate": {
                        "type": "string"
                    },
                    "formattedDuration": {
                        "type": "string"
                    },
                    "startAt": {
                        "type": "string"
                    },
                    "endAt": {
                        "type": "string"
                    },
                    "now": {
                        "type": "string"
                    },
                    "fulled": {
                        "type": "boolean"
                    },
                    "registrationEnabled": {
                        "type": "boolean"
                    },
                    "registrationUrl": {
                        "type": "string"
                    },
                    "fullProgrammeUrl": {
                        "type": "string"
                    },
                    "language": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "location": {
                        "type": "string"
                    },
                    "bookmarked": {
                        "type": "boolean"
                    },
                    "qualificationLogo": {
                        "type": "array",
                        "items": {
                            "type": "array"
                        }
                    },
                    "isLive": {
                        "type": "boolean"
                    },
                    "nature": {
                        "type": "string"
                    },
                    "isPublic": {
                        "type": "boolean"
                    },
                    "isAbleToWatch": {
                        "type": "boolean"
                    },
                    "isRegistered": {
                        "type": "boolean"
                    },
                    "isVideoUrlReady": {
                        "type": "boolean"
                    },
                    "streamingUrl": {
                        "type": "string",
                        "nullable": true
                    },
                    "vcPlaybackUrl": {
                        "type": "string"
                    },
                    "isFull": {
                        "type": "string"
                    },
                    "vcPlaybackSetting": {
                        "type": "string"
                    },
                    "recommendedText": {
                        "type": "string"
                    },
                    "recommendedTextBackgroundColor": {
                        "type": "string"
                    },
                    "recommendedTextColor": {
                        "type": "string"
                    },
                    "isFirstAppearDate": {
                        "type": "boolean"
                    },
                    "isFirstAppearCategory": {
                        "type": "boolean"
                    },
                    "firstLayerFilter": {
                        "$ref": "#/components/schemas/FilterLayerDto"
                    },
                    "secondLayerFilter": {
                        "$ref": "#/components/schemas/FilterLayerDto"
                    },
                    "logoPanels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LogoPanelDto"
                        }
                    },
                    "speakerPanels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ConfSpeakerPanelDto"
                        }
                    },
                    "streamingType": {
                        "type": "string",
                        "enum": [
                            "KOL",
                            "VOD",
                            "LIVE"
                        ]
                    },
                    "eventDetail": {
                        "$ref": "#/components/schemas/EventDetailDto"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "description",
                    "displayStatus",
                    "formattedStartDate",
                    "formattedDuration",
                    "startAt",
                    "endAt",
                    "now",
                    "fulled",
                    "registrationEnabled",
                    "registrationUrl",
                    "fullProgrammeUrl",
                    "language",
                    "type",
                    "location",
                    "bookmarked",
                    "qualificationLogo",
                    "isLive",
                    "nature",
                    "isPublic",
                    "isAbleToWatch",
                    "isRegistered",
                    "isVideoUrlReady",
                    "streamingUrl",
                    "vcPlaybackUrl",
                    "isFull",
                    "vcPlaybackSetting",
                    "recommendedText",
                    "recommendedTextBackgroundColor",
                    "recommendedTextColor",
                    "isFirstAppearDate",
                    "isFirstAppearCategory",
                    "firstLayerFilter",
                    "secondLayerFilter",
                    "logoPanels",
                    "speakerPanels",
                    "streamingType",
                    "eventDetail"
                ]
            },
            "FilterOptionDetailDto": {
                "type": "object",
                "properties": {
                    "label": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    },
                    "isActive": {
                        "type": "boolean"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "DATE",
                            "CATEGORY"
                        ]
                    }
                },
                "required": [
                    "label",
                    "value",
                    "isActive",
                    "type"
                ]
            },
            "GetSeminarV2CategoryDto": {
                "type": "object",
                "properties": {
                    "firstCategory": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FilterOptionDetailDto"
                        }
                    },
                    "secondCategory": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FilterOptionDetailDto"
                        }
                    }
                },
                "required": [
                    "firstCategory",
                    "secondCategory"
                ]
            },
            "GetSeminarV2ResultDto": {
                "type": "object",
                "properties": {
                    "seminarDataForModal": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FindAllResultDto"
                        }
                    },
                    "seminarData": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FindAllResultDto"
                        }
                    },
                    "sbeFooter": {
                        "type": "string",
                        "description": "this may be html"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GetSeminarV2CategoryDto"
                        }
                    },
                    "seminarDataAmount": {
                        "type": "number"
                    }
                },
                "required": [
                    "seminarDataForModal",
                    "seminarData",
                    "sbeFooter",
                    "categories",
                    "seminarDataAmount"
                ]
            },
            "GetSeminarV2Response": {
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/GetSeminarV2ResultDto"
                    }
                },
                "required": [
                    "data"
                ]
            },
            "GetCustomQuestionsReqDto": {
                "type": "object",
                "properties": {
                    "lang": {
                        "type": "string",
                        "description": "frontend locale code",
                        "example": "en"
                    },
                    "fairCode": {
                        "type": "string",
                        "description": "fair code",
                        "example": "bnr"
                    },
                    "fiscalYear": {
                        "type": "string",
                        "description": "fiscal year of the fair",
                        "example": "2223"
                    },
                    "projectYear": {
                        "type": "string",
                        "description": "project year of the fair",
                        "example": "2022"
                    }
                },
                "required": [
                    "lang",
                    "fairCode",
                    "fiscalYear",
                    "projectYear"
                ]
            },
            "CustomQuestion": {
                "type": "object",
                "properties": {
                    "filterNum": {
                        "type": "number",
                        "description": "filter number",
                        "example": 1
                    },
                    "filterLabel": {
                        "type": "string",
                        "description": "filter label (question) in requested locale",
                        "example": "Sport"
                    },
                    "filterLabelEn": {
                        "type": "string",
                        "description": "filter label (question) in English",
                        "example": "Sport"
                    },
                    "questionNum": {
                        "type": "number",
                        "description": "question number",
                        "example": 1
                    },
                    "categoryCode": {
                        "type": "string",
                        "description": "answer code",
                        "example": "F102"
                    },
                    "parentCategoryCode": {
                        "type": "string",
                        "description": "the parent of the answer code",
                        "example": null
                    },
                    "value": {
                        "type": "string",
                        "description": "answer label in requested locale",
                        "example": "Running"
                    },
                    "valueEn": {
                        "type": "string",
                        "description": "answer label in english",
                        "example": "Running"
                    },
                    "sequence": {
                        "type": "number",
                        "description": "sequence number of the answer",
                        "example": 1
                    }
                },
                "required": [
                    "filterNum",
                    "filterLabel",
                    "filterLabelEn",
                    "questionNum",
                    "categoryCode",
                    "value",
                    "valueEn",
                    "sequence"
                ]
            },
            "GetCustomQuestionsResData": {
                "type": "object",
                "properties": {
                    "questions": {
                        "description": "custom questions returned",
                        "example": [
                            {
                                "questionNum": 1,
                                "categoryCode": "F102",
                                "parentCategoryCode": null,
                                "value": "Running",
                                "valueEn": "Running",
                                "filterNum": 1,
                                "filterLabel": "Sport",
                                "filterLabelEn": "Sport",
                                "sequence": 1
                            }
                        ],
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CustomQuestion"
                        }
                    }
                },
                "required": [
                    "questions"
                ]
            },
            "GetCustomQuestionsResDto": {
                "type": "object",
                "properties": {
                    "sql": {
                        "type": "string",
                        "description": "the SQL query for getting custom questions for debugging",
                        "example": "SELECT `fairCustomQuestion`.`questionNum` AS questionNum, `fairCustomQuestion`.`categoryCode` AS categoryCode, `fairCustomQuestion`.`parentCategoryCode` AS parentCategoryCode, `fairCustomQuestion`.`valueEn` AS value, `fairCustomQuestion`.`valueEn` AS valueEn, `fairCustomQuestionFilter`.`filterNum` AS filterNum, `fairCustomQuestionFilter`.`filterNameEn` AS filterLabel, `fairCustomQuestionFilter`.`filterNameEn` AS filterLabelEn, `fairCustomQuestion`.`sequence` As sequence FROM `fairCustomQuestionFilter` `fairCustomQuestionFilter` LEFT JOIN `fairCustomQuestion` `fairCustomQuestion` ON `fairCustomQuestion`.`questionNum` = `fairCustomQuestionFilter`.`questionNum` AND `fairCustomQuestion`.`fairCode` = ? AND `fairCustomQuestion`.`fiscalYear` = ?  LEFT JOIN `fairCustomQuestion` `parent` ON `fairCustomQuestion`.`parentCategoryCode` = `parent`.`categoryCode` AND `parent`.`fairCode` = ? AND `parent`.`fiscalYear` = ? WHERE `fairCustomQuestionFilter`.`fairCode` = ? AND `fairCustomQuestionFilter`.`fiscalYear` = ? ORDER BY `fairCustomQuestionFilter`.`filterNum` ASC, IFNULL(`parent`.`questionNum`, `fairCustomQuestion`.`questionNum`) ASC, IFNULL(`parent`.`sequence`, `fairCustomQuestion`.`sequence`) ASC, IF(`fairCustomQuestion`.`parentCategoryCode` IS NULL, 0, 1) ASC"
                    },
                    "params": {
                        "type": "string",
                        "description": "related SQL parameters in JSON string",
                        "example": "{\"fairCode\":\"mp\",\"fiscalYear\":\"2223\"}"
                    },
                    "data": {
                        "description": "the custom questions available",
                        "example": {
                            "questions": [
                                {
                                    "questionNum": 1,
                                    "categoryCode": "F102",
                                    "parentCategoryCode": null,
                                    "value": "Running",
                                    "valueEn": "Running",
                                    "filterNum": 1,
                                    "filterLabel": "Sport",
                                    "filterLabelEn": "Sport",
                                    "sequence": 1
                                }
                            ]
                        },
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/GetCustomQuestionsResData"
                            }
                        ]
                    }
                },
                "required": [
                    "sql",
                    "params",
                    "data"
                ]
            },
            "SearchConfParticipantsReqDto": {
                "type": "object",
                "properties": {
                    "fairCode": {
                        "type": "string",
                        "description": "fair code",
                        "example": "bnr"
                    },
                    "fiscalYear": {
                        "type": "string",
                        "description": "fiscal year of the fair",
                        "example": "2223"
                    },
                    "projectYear": {
                        "type": "string",
                        "description": "projectYear year of the fair",
                        "example": "2022"
                    },
                    "keywordType": {
                        "type": "string",
                        "description": "type of the given keyword",
                        "example": "all"
                    },
                    "keyword": {
                        "type": "string",
                        "description": "keyword for searching",
                        "example": "test"
                    },
                    "from": {
                        "type": "number",
                        "description": "pagination offset",
                        "example": 0
                    },
                    "size": {
                        "type": "number",
                        "description": "pagination limit",
                        "example": 30
                    },
                    "filterCountry": {
                        "type": "string",
                        "description": "country code for filtering",
                        "example": "HKG"
                    },
                    "filterQ1": {
                        "description": "filter values for question 1",
                        "example": [
                            "A101"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "filterQ2": {
                        "description": "filter values for question 2",
                        "example": [],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "filterQ3": {
                        "description": "filter values for question 3",
                        "example": [],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "filterQ4": {
                        "description": "filter values for question 4",
                        "example": [],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "filterQ5": {
                        "description": "filter values for question 5",
                        "example": [],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "filterQ6": {
                        "description": "filter values for question 6",
                        "example": [],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "filterQ7": {
                        "description": "filter values for question 7",
                        "example": [],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "filterQ8": {
                        "description": "filter values for question 8",
                        "example": [],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "filterQ9": {
                        "description": "filter values for question 9",
                        "example": [],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "filterQ10": {
                        "description": "filter values for question 10",
                        "example": [],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "fairCode",
                    "fiscalYear",
                    "projectYear",
                    "keywordType"
                ]
            },
            "ConfParticipant": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ref id of participant",
                        "example": "331668"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "display name of participant",
                        "example": "Alex Ho"
                    },
                    "position": {
                        "type": "string",
                        "description": "position of participant",
                        "example": "Analyst Programmer"
                    },
                    "companyName": {
                        "type": "string",
                        "description": "company name of participant",
                        "example": "ESD Service Limited"
                    }
                },
                "required": [
                    "id",
                    "displayName",
                    "companyName"
                ]
            },
            "SearchConfParticipantsResData": {
                "type": "object",
                "properties": {
                    "from": {
                        "type": "number",
                        "description": "pagination offset",
                        "example": 0
                    },
                    "size": {
                        "type": "number",
                        "description": "number of participants returned",
                        "example": 30
                    },
                    "total_size": {
                        "type": "number",
                        "description": "total number of participants",
                        "example": 60
                    },
                    "participants": {
                        "description": "participants returned",
                        "example": [],
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ConfParticipant"
                        }
                    },
                    "sensitiveKeyword": {
                        "type": "boolean",
                        "description": "whether the keyword for searching contains sensitive keyword",
                        "example": false
                    }
                },
                "required": [
                    "from",
                    "size",
                    "total_size",
                    "participants",
                    "sensitiveKeyword"
                ]
            },
            "SearchConfParticipantsResDto": {
                "type": "object",
                "properties": {
                    "sql": {
                        "type": "string",
                        "description": "the SQL query for searhcing participants",
                        "example": "SELECT DISTINCT `fairRegistration`.`id` AS `fairRegistration_id`, `fairRegistration`.`displayName` AS `fairRegistration_displayName`, `fairRegistration`.`position` AS `fairRegistration_position`, `fairRegistration`.`companyName` AS `fairRegistration_companyName` FROM `fairRegistration` `fairRegistration` LEFT JOIN `fairParticipantType` `fairParticipantType` ON `fairParticipantType`.`id`=`fairRegistration`.`fairParticipantTypeId`  LEFT JOIN `fairRegistrationStatus` `fairRegistrationStatus` ON `fairRegistrationStatus`.`id`=`fairRegistration`.`fairRegistrationStatusId`  LEFT JOIN `c2mParticipantStatus` `c2mParticipantStatus` ON `c2mParticipantStatus`.`id`=`fairRegistration`.`c2mParticipantStatusId` WHERE `fairParticipantType`.`fairParticipantTypeCode` = ? AND `fairRegistrationStatus`.`fairRegistrationStatusCode` = ? AND `c2mParticipantStatus`.`c2mParticipantStatusCode` = ? AND `fairRegistration`.`fairCode` = ? AND `fairRegistration`.`fiscalYear` = ? AND EXISTS (SELECT 'x' FROM fairRegistrationCustomQuestion WHERE fairRegistrationId = `fairRegistration`.`id` AND questionNum = 1 AND categoryCode IN (?)) AND EXISTS (SELECT 'x' FROM fairRegistrationCustomQuestion WHERE fairRegistrationId = `fairRegistration`.`id` AND questionNum = 2 AND categoryCode IN (?)) ORDER BY `fairRegistration`.`displayName` ASC LIMIT 30"
                    },
                    "params": {
                        "type": "string",
                        "description": "the parameters used in the SQL query",
                        "example": "{\"typeCode\":\"GENERAL_PARTICIPANT\",\"statusCode\":\"CONFIRMED\",\"c2mStatusCode\":\"ACTIVE\",\"fairCode\":\"bnr\",\"fiscalYear\":\"2223\",\"q1\":[\"B121\"],\"q2\":[\"E104\"]}"
                    },
                    "data": {
                        "description": "the search result",
                        "example": {
                            "from": 0,
                            "size": 30,
                            "total_size": 1,
                            "participants": [
                                {
                                    "id": "331668",
                                    "displayName": "Alex Ho",
                                    "position": "Analyst Programmer",
                                    "companyName": "ESD Service Limited"
                                }
                            ],
                            "sensitiveKeyword": false
                        },
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/SearchConfParticipantsResData"
                            }
                        ]
                    }
                },
                "required": [
                    "sql",
                    "params",
                    "data"
                ]
            },
            "GetConfParticipantReqDto": {
                "type": "object",
                "properties": {
                    "fairCode": {
                        "type": "string",
                        "description": "fair code",
                        "example": "bnr"
                    },
                    "fiscalYear": {
                        "type": "string",
                        "description": "fiscal year of the fair",
                        "example": "2223"
                    },
                    "projectYear": {
                        "type": "string",
                        "description": "project year of the fair",
                        "example": "2022"
                    },
                    "id": {
                        "type": "string",
                        "description": "ref id of the participant",
                        "example": "331668"
                    },
                    "lang": {
                        "type": "string",
                        "description": "frontend locale code",
                        "example": "en"
                    }
                }
            },
            "FairParticipant": {
                "type": "object",
                "properties": {
                    "ssoUid": {
                        "type": "string",
                        "description": "SSO UID of the participant",
                        "example": "da6c30132bcd4d27b0473a883543ec78"
                    }
                },
                "required": [
                    "ssoUid"
                ]
            },
            "GetConfParticipantQAns": {
                "type": "object",
                "properties": {
                    "questionNum": {
                        "type": "number",
                        "description": "question number of the answer",
                        "example": 1
                    },
                    "categoryCode": {
                        "type": "string",
                        "description": "the answer code",
                        "example": "B121"
                    },
                    "optionText": {
                        "type": "string",
                        "description": "the option text to be shown for the answer",
                        "example": ""
                    }
                },
                "required": [
                    "questionNum",
                    "categoryCode"
                ]
            },
            "ConfParticipantDetail": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ref id of participant",
                        "example": "331668"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "display name of participant",
                        "example": "Alex Ho"
                    },
                    "position": {
                        "type": "string",
                        "description": "position of participant",
                        "example": "Analyst Programmer"
                    },
                    "companyName": {
                        "type": "string",
                        "description": "company name of participant",
                        "example": "ESD Service Limited"
                    },
                    "addressCountryCode": {
                        "type": "string",
                        "description": "country name of the participant",
                        "example": "Hong Kong"
                    },
                    "fairParticipantType": {
                        "description": "fairParticipantType record of the participant",
                        "example": {},
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/FairParticipant"
                            }
                        ]
                    },
                    "fairParticipant": {
                        "description": "fairParticipant record of the participant",
                        "example": {},
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/FairParticipant"
                            }
                        ]
                    },
                    "fairRegistrationCustomQuestion": {
                        "description": "question answers of the participant",
                        "example": [],
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GetConfParticipantQAns"
                        }
                    }
                },
                "required": [
                    "id",
                    "displayName",
                    "companyName",
                    "addressCountryCode",
                    "fairParticipantType",
                    "fairParticipant",
                    "fairRegistrationCustomQuestion"
                ]
            },
            "GetConfParticipantResData": {
                "type": "object",
                "properties": {
                    "participant": {
                        "description": "the participant detail returned",
                        "example": {},
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ConfParticipantDetail"
                            }
                        ]
                    }
                }
            },
            "GetConfParticipantResDto": {
                "type": "object",
                "properties": {
                    "sql": {
                        "type": "string",
                        "description": "the SQL query for getting participant detail",
                        "example": "SELECT DISTINCT `fairRegistration`.`id` AS `fairRegistration_id`, `fairRegistration`.`displayName` AS `fairRegistration_displayName`, `fairRegistration`.`position` AS `fairRegistration_position`, `fairRegistration`.`companyName` AS `fairRegistration_companyName`, `fairRegistration`.`addressCountryCode` AS `fairRegistration_addressCountryCode`, `fairParticipant`.`ssoUid` AS `fairParticipant_ssoUid`, `fairRegistrationCustomQuestion`.`questionNum` AS `fairRegistrationCustomQuestion_questionNum`, `fairRegistrationCustomQuestion`.`categoryCode` AS `fairRegistrationCustomQuestion_categoryCode`, `fairRegistrationCustomQuestion`.`optionText` AS `fairRegistrationCustomQuestion_optionText` FROM `fairRegistration` `fairRegistration` LEFT JOIN `fairParticipantType` `fairParticipantType` ON `fairParticipantType`.`id`=`fairRegistration`.`fairParticipantTypeId`  LEFT JOIN `fairRegistrationStatus` `fairRegistrationStatus` ON `fairRegistrationStatus`.`id`=`fairRegistration`.`fairRegistrationStatusId`  LEFT JOIN `c2mParticipantStatus` `c2mParticipantStatus` ON `c2mParticipantStatus`.`id`=`fairRegistration`.`c2mParticipantStatusId`  LEFT JOIN `fairParticipant` `fairParticipant` ON `fairParticipant`.`id`=`fairRegistration`.`fairParticipantId`  LEFT JOIN `fairRegistrationCustomQuestion` `fairRegistrationCustomQuestion` ON `fairRegistrationCustomQuestion`.`fairRegistrationId`=`fairRegistration`.`id` WHERE `fairParticipantType`.`fairParticipantTypeCode` = ? AND `fairRegistrationStatus`.`fairRegistrationStatusCode` = ? AND `c2mParticipantStatus`.`c2mParticipantStatusCode` = ? AND `fairRegistration`.`fairCode` = ? AND `fairRegistration`.`fiscalYear` = ? AND `fairRegistration`.`id` = ? ORDER BY `fairRegistration`.`displayName` ASC"
                    },
                    "params": {
                        "type": "string",
                        "description": "related SQL parameters in JSON string",
                        "example": "{\"typeCode\":\"GENERAL_PARTICIPANT\",\"statusCode\":\"CONFIRMED\",\"c2mStatusCode\":\"ACTIVE\",\"fairCode\":\"mp\",\"fiscalYear\":\"2223\",\"id\":\"331668\",\"lang\":\"en\"}"
                    },
                    "data": {
                        "description": "the search result",
                        "example": {
                            "participant": {
                                "id": "331668",
                                "displayName": "Alex Ho",
                                "position": "Analyst Programmer",
                                "companyName": "ESD Service Limited",
                                "addressCountryCode": "Hong Kong",
                                "fairParticipant": {
                                    "ssoUid": "da6c30132bcd4d27b0473a883543ec78"
                                },
                                "fairRegistrationCustomQuestions": [
                                    {
                                        "questionNum": "1",
                                        "categoryCode": "B121",
                                        "optionText": ""
                                    }
                                ]
                            }
                        },
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/GetConfParticipantResData"
                            }
                        ]
                    }
                },
                "required": [
                    "sql",
                    "params",
                    "data"
                ]
            },
            "Country": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "country code",
                        "example": "AFG"
                    },
                    "value": {
                        "type": "string",
                        "description": "country name",
                        "example": "Afghanistan"
                    }
                },
                "required": [
                    "code",
                    "value"
                ]
            },
            "GetCountryListResData": {
                "type": "object",
                "properties": {
                    "countries": {
                        "description": "countries returned",
                        "example": [
                            {
                                "code": "AFG",
                                "value": "Afghanistan"
                            }
                        ],
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Country"
                        }
                    }
                },
                "required": [
                    "countries"
                ]
            },
            "GetCountryListResDto": {
                "type": "object",
                "properties": {
                    "data": {
                        "description": "the country list available",
                        "example": {
                            "countries": [
                                {
                                    "code": "AFG",
                                    "value": "Afghanistan"
                                }
                            ]
                        },
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/GetCountryListResData"
                            }
                        ]
                    }
                },
                "required": [
                    "data"
                ]
            },
            "ParticipantTypeSearchDto": {
                "type": "object",
                "properties": {
                    "emailId": {
                        "type": "string",
                        "description": "emailId",
                        "example": "abc@temp.com"
                    },
                    "ssoUid": {
                        "type": "string",
                        "description": "ssoUid",
                        "example": "4b9c94b9d0b4fea8a3f2327056e58359"
                    },
                    "fairCodes": {
                        "description": "list of fairCode",
                        "example": [
                            "hkjewellery, hkwinefair"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "emailId",
                    "ssoUid",
                    "fairCodes"
                ]
            },
            "ParticipantTypeByFairListDto": {
                "type": "object",
                "properties": {}
            },
            "GetSeminarRegistrationsReqDto": {
                "type": "object",
                "properties": {
                    "fairCode": {
                        "type": "string",
                        "description": "fair code",
                        "example": "bnr"
                    },
                    "year": {
                        "type": "string",
                        "description": "fiscal year of the fair",
                        "example": "2223"
                    }
                },
                "required": [
                    "fairCode",
                    "year"
                ]
            },
            "SeminarRegistration": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "description": "seminar registration ID",
                        "example": 1
                    },
                    "seminarRegistrationType": {
                        "type": "string",
                        "description": "seminar registration type",
                        "example": "Online"
                    },
                    "seminarId": {
                        "type": "string",
                        "description": "SBE seminar ID",
                        "example": ""
                    },
                    "watchNowStatus": {
                        "type": "number",
                        "description": "count of watch now",
                        "example": 0
                    },
                    "playBackStatus": {
                        "type": "number",
                        "description": "count of playback",
                        "example": 0
                    },
                    "effectiveStartTime": {
                        "type": "string",
                        "description": "playback effective start time",
                        "example": ""
                    },
                    "effectiveEndTime": {
                        "type": "string",
                        "description": "playback effective end time",
                        "example": ""
                    }
                },
                "required": [
                    "id",
                    "seminarRegistrationType",
                    "seminarId",
                    "watchNowStatus",
                    "playBackStatus",
                    "effectiveStartTime",
                    "effectiveEndTime"
                ]
            },
            "GetSeminarRegistrationsResDto": {
                "type": "object",
                "properties": {
                    "sql": {
                        "type": "string",
                        "description": "related SQL",
                        "example": ""
                    },
                    "params": {
                        "type": "string",
                        "description": "related SQL parameters in JSON string",
                        "example": []
                    },
                    "data": {
                        "description": "seminar registrations returned",
                        "example": [],
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SeminarRegistration"
                        }
                    }
                },
                "required": [
                    "sql",
                    "params",
                    "data"
                ]
            },
            "UpdateSeminarRegistrationReqDto": {
                "type": "object",
                "properties": {
                    "fairCode": {
                        "type": "string",
                        "description": "fair code",
                        "example": "bnr"
                    },
                    "year": {
                        "type": "string",
                        "description": "fiscal year of the fair",
                        "example": "2223"
                    },
                    "seminarRegistrationId": {
                        "type": "number",
                        "description": "seminar registration ID",
                        "example": 1
                    },
                    "type": {
                        "type": "string",
                        "description": "type of video action",
                        "example": "watchNow"
                    }
                },
                "required": [
                    "fairCode",
                    "year",
                    "seminarRegistrationId",
                    "type"
                ]
            },
            "UpdateSeminarRegistrationResDto": {
                "type": "object",
                "properties": {
                    "sql": {
                        "type": "string",
                        "description": "related SQL",
                        "example": ""
                    },
                    "params": {
                        "type": "string",
                        "description": "related SQL parameters in JSON string",
                        "example": ""
                    },
                    "data": {
                        "type": "string",
                        "description": "whether the operation is success or fail",
                        "example": []
                    }
                },
                "required": [
                    "sql",
                    "params",
                    "data"
                ]
            },
            "GetFairTicketPassResDto": {
                "type": "object",
                "properties": {
                    "fairCode": {
                        "type": "string",
                        "description": "fair code",
                        "example": "bnr"
                    },
                    "fiscalYear": {
                        "type": "string",
                        "description": "fiscal year of the fair",
                        "example": "2223"
                    },
                    "projectYear": {
                        "type": "string",
                        "description": "project year of the fair",
                        "example": "2022"
                    },
                    "ticketPassCode": {
                        "type": "string",
                        "description": "ticketPassCode",
                        "example": "ticketPassCode"
                    },
                    "ticketPassNameEn": {
                        "type": "string",
                        "description": "ticketPassNameEn",
                        "example": "ticketPassNameEn"
                    },
                    "ticketPassTypeCode": {
                        "type": "string",
                        "description": "ticketPassTypeCode",
                        "example": "ticketPassTypeCode"
                    }
                },
                "required": [
                    "fairCode",
                    "fiscalYear",
                    "projectYear",
                    "ticketPassCode",
                    "ticketPassNameEn",
                    "ticketPassTypeCode"
                ]
            },
            "ParticipantTicketPassNoteReqDto": {
                "type": "object",
                "properties": {
                    "generalParticipantRemark": {
                        "type": "string",
                        "description": "General Participant Remark",
                        "example": "General Participant Remark",
                        "maxLength": 30000
                    }
                }
            },
            "ConferenceC2MParticipantStatusListDto": {
                "type": "object",
                "properties": {
                    "actions": {
                        "description": "Array of registrationRecordId and status pair ",
                        "example": "\"actions\": [{\"registrationRecordId\": 1,\"status\": 1}]",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "actions"
                ]
            },
            "SeminarDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "displayStatus": {
                        "type": "boolean"
                    },
                    "formattedStartDate": {
                        "type": "string"
                    },
                    "formattedDuration": {
                        "type": "string"
                    },
                    "startAt": {
                        "type": "string"
                    },
                    "endAt": {
                        "type": "string"
                    },
                    "fulled": {
                        "type": "boolean"
                    },
                    "registrationEnabled": {
                        "type": "boolean"
                    },
                    "registrationUrl": {
                        "type": "string"
                    },
                    "fullProgrammeUrl": {
                        "type": "string"
                    },
                    "language": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "location": {
                        "type": "string"
                    },
                    "bookmarked": {
                        "type": "boolean"
                    },
                    "qualificationLogo": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "logoPanels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LogoPanelDto"
                        }
                    },
                    "speakerPanels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ConfSpeakerPanelDto"
                        }
                    },
                    "isLive": {
                        "type": "boolean"
                    },
                    "nature": {
                        "type": "string"
                    },
                    "streamingType": {
                        "type": "string",
                        "enum": [
                            "KOL",
                            "VOD",
                            "LIVE"
                        ]
                    },
                    "isPublic": {
                        "type": "boolean"
                    },
                    "isAbleToWatch": {
                        "type": "boolean"
                    },
                    "isRegistered": {
                        "type": "boolean"
                    },
                    "eventDetail": {
                        "nullable": true,
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/EventDetailDto"
                            }
                        ]
                    },
                    "isVideoUrlReady": {
                        "type": "boolean"
                    },
                    "streamingUrl": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "id",
                    "name",
                    "description",
                    "displayStatus",
                    "formattedStartDate",
                    "formattedDuration",
                    "startAt",
                    "endAt",
                    "fulled",
                    "registrationEnabled",
                    "registrationUrl",
                    "fullProgrammeUrl",
                    "language",
                    "type",
                    "location",
                    "bookmarked",
                    "qualificationLogo",
                    "logoPanels",
                    "speakerPanels",
                    "isLive",
                    "nature",
                    "streamingType",
                    "isPublic",
                    "isAbleToWatch",
                    "isRegistered",
                    "eventDetail",
                    "isVideoUrlReady",
                    "streamingUrl"
                ]
            },
            "GetOneSeminarEventDetailResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/SeminarDto"
                    }
                },
                "required": [
                    "data"
                ]
            },
            "CheckSeminarIsEndedResDto": {
                "type": "object",
                "properties": {
                    "sql": {
                        "type": "string",
                        "description": "related SQL",
                        "example": ""
                    },
                    "params": {
                        "type": "string",
                        "description": "related SQL parameters in JSON string",
                        "example": ""
                    },
                    "data": {
                        "type": "string",
                        "description": "whether the seminar is ended or not",
                        "example": []
                    }
                },
                "required": [
                    "sql",
                    "params",
                    "data"
                ]
            },
            "JoinSeminarRequestDto": {
                "type": "object",
                "properties": {}
            },
            "RtmpUpsertRequestDto": {
                "type": "object",
                "properties": {}
            },
            "RtmpPlaybackRequestDto": {
                "type": "object",
                "properties": {}
            },
            "FindVideoRequest": {
                "type": "object",
                "properties": {}
            },
            "BatchFindVideoRequest": {
                "type": "object",
                "properties": {}
            },
            "UpdateVideosRequest": {
                "type": "object",
                "properties": {}
            },
            "UpsertVideoRequest": {
                "type": "object",
                "properties": {}
            },
            "UpdateSeminarRequestDto": {
                "type": "object",
                "properties": {}
            },
            "UpsertRatingRequestDto": {
                "type": "object",
                "properties": {}
            },
            "SeminarRegistrationCommonDto": {
                "type": "object",
                "properties": {
                    "userData": {
                        "type": "string",
                        "description": "fairCode",
                        "example": "[{\n      fairCode: \"xxx\",\n      fiscalYear: \"xxx\",\n      userId: \"ssouid\",\n    }]"
                    },
                    "eventId": {
                        "type": "string",
                        "description": "eventId",
                        "example": "100"
                    },
                    "systemCode": {
                        "type": "string",
                        "description": "systemCode",
                        "example": "VEP"
                    }
                },
                "required": [
                    "userData",
                    "eventId",
                    "systemCode"
                ]
            },
            "SeminarAnswersWithSeminarId": {
                "type": "object",
                "properties": {
                    "seminarId": {
                        "type": "string",
                        "description": "seminarId",
                        "example": "18132"
                    },
                    "isCheckedOption1": {
                        "type": "string",
                        "description": "isCheckedOption1",
                        "example": "1"
                    },
                    "isCheckedOption2": {
                        "type": "string",
                        "description": "isCheckedOption2",
                        "example": "1"
                    },
                    "isCheckedOption3": {
                        "type": "string",
                        "description": "isCheckedOption3",
                        "example": "1"
                    },
                    "option1Ans": {
                        "type": "string",
                        "description": "option1Ans",
                        "example": "18132"
                    },
                    "option2Ans": {
                        "type": "string",
                        "description": "option2Ans",
                        "example": "18132"
                    },
                    "option3Ans": {
                        "type": "string",
                        "description": "option3Ans",
                        "example": "18132"
                    }
                },
                "required": [
                    "seminarId",
                    "isCheckedOption1",
                    "isCheckedOption2",
                    "isCheckedOption3",
                    "option1Ans",
                    "option2Ans",
                    "option3Ans"
                ]
            },
            "SeminarRegistrationForSeminarsDto": {
                "type": "object",
                "properties": {
                    "userData": {
                        "type": "string",
                        "description": "fairCode",
                        "example": "[{\n      fairCode: \"xxx\",\n      fiscalYear: \"xxx\",\n      userId: \"ssouid\",\n    }]"
                    },
                    "eventId": {
                        "type": "string",
                        "description": "eventId",
                        "example": "100"
                    },
                    "systemCode": {
                        "type": "string",
                        "description": "systemCode",
                        "example": "VEP"
                    },
                    "seminarReg": {
                        "example": "[]",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SeminarAnswersWithSeminarId"
                        }
                    },
                    "seminarId": {
                        "type": "string",
                        "description": "seminarId",
                        "example": "18132"
                    }
                },
                "required": [
                    "userData",
                    "eventId",
                    "systemCode",
                    "seminarReg",
                    "seminarId"
                ]
            },
            "ParticipantTypeByFairDetailSearchDto": {
                "type": "object",
                "properties": {
                    "emailId": {
                        "type": "string",
                        "description": "emailId",
                        "example": "abc@temp.com"
                    },
                    "ssoUid": {
                        "type": "string",
                        "description": "ssoUid",
                        "example": "4b9c94b9d0b4fea8a3f2327056e58359"
                    },
                    "fairDetailList": {
                        "description": "list of fairDetail",
                        "example": [
                            {
                                "fairCode": "hkjewellery",
                                "fairSettingFairCode": "hkjewellery",
                                "fiscalYear": "2223"
                            }
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "emailId",
                    "ssoUid",
                    "fairDetailList"
                ]
            },
            "UpdateC2MProfileReqDto": {
                "type": "object",
                "properties": {
                    "productInterest": {
                        "description": "array of object for product interest",
                        "example": [
                            {
                                "stId": "14aeda3c67ad11ec90d60242ac120003",
                                "iaId": "98b56c08df0711ea906c0a10104e3bf6",
                                "teCode": "P4601A4XA01"
                            }
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "productStrategy": {
                        "description": "productStrategy",
                        "example": [
                            "OEM"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "targetPreferredMarkets": {
                        "description": "targetPreferredMarkets in councilwise code",
                        "example": [
                            "THA"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "UpdateResultDto": {
                "type": "object",
                "properties": {}
            },
            "UpdateFairParticipantRegistrationRecordDto": {
                "type": "object",
                "properties": {
                    "fairCode": {
                        "type": "string",
                        "description": "fairCode",
                        "example": "fairCode"
                    },
                    "productInterest": {
                        "description": "array of string for product interest in st_id",
                        "example": [
                            "f10e8717df0311ea906c0a10104e3bf6"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "otherProductCategories": {
                        "type": "string",
                        "description": "otherProductCategories",
                        "example": "Rings,Jewellery,Diamond"
                    },
                    "productStrategy": {
                        "description": "productStrategy",
                        "example": [
                            "OEM"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "targetPreferredMarkets": {
                        "description": "targetPreferredMarkets in councilwise code",
                        "example": [
                            "THA"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "numberOfOutlets": {
                        "type": "string",
                        "description": "numberOfOutlets",
                        "example": "1"
                    },
                    "hotel": {
                        "type": "string",
                        "description": "hotel",
                        "example": "The Peninsula"
                    },
                    "roomType": {
                        "type": "string",
                        "description": "roomType",
                        "example": "XX"
                    },
                    "sourcingBudget": {
                        "type": "string",
                        "description": "sourcingBudget",
                        "example": "1000-50000"
                    },
                    "interestedIn": {
                        "type": "string",
                        "description": "interestedIn",
                        "example": "Y"
                    },
                    "pricePoint": {
                        "type": "string",
                        "description": "pricePoint",
                        "example": "Mass market,Middle market"
                    },
                    "lowMOQ": {
                        "type": "string",
                        "description": "lowMOQ",
                        "example": "Y"
                    },
                    "companyLogo": {
                        "type": "string",
                        "description": "companyLogo",
                        "example": "TBC"
                    },
                    "profilePicture": {
                        "type": "string",
                        "description": "profilePicture",
                        "example": "TBC"
                    },
                    "registrationType": {
                        "type": "string",
                        "description": "registrationType",
                        "example": "E_REG_FORM"
                    },
                    "registrationStatus": {
                        "type": "string",
                        "description": "registrationStatus",
                        "example": "CONFIRMED"
                    },
                    "participantType": {
                        "type": "string",
                        "description": "participantType",
                        "example": "ORGANIC"
                    },
                    "click2MatchStatus": {
                        "type": "string",
                        "description": "click2MatchStatus",
                        "example": "ACTIVE"
                    }
                },
                "required": [
                    "fairCode"
                ]
            },
            "ParticipantRegistrationBySsouidsDto": {
                "type": "object",
                "properties": {
                    "ssoUids": {
                        "description": "list of ssoUid",
                        "example": [
                            "5f2ec1c6d2d24be681752bc7500380e1"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "ssoUids"
                ]
            },
            "MultiLangNameDto": {
                "type": "object",
                "properties": {
                    "en": {
                        "type": "string",
                        "description": "name en",
                        "example": "Hong Kong International Jewellery Show"
                    },
                    "tc": {
                        "type": "string",
                        "description": "name tc",
                        "example": "香港國際珠寶展"
                    },
                    "sc": {
                        "type": "string",
                        "description": "name sc",
                        "example": "香港国际珠宝展"
                    }
                },
                "required": [
                    "en",
                    "tc",
                    "sc"
                ]
            },
            "FairNameDto": {
                "type": "object",
                "properties": {
                    "fairCode": {
                        "type": "string",
                        "description": "fairCode",
                        "example": "hkjewellery"
                    },
                    "fairDisplayName": {
                        "description": "display name from fair setting",
                        "example": {
                            "en": "Hong Kong International Jewellery Show",
                            "tc": "香港國際珠寶展",
                            "sc": "香港国际珠宝展"
                        },
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/MultiLangNameDto"
                            }
                        ]
                    }
                },
                "required": [
                    "fairCode",
                    "fairDisplayName"
                ]
            },
            "GetCombinedFairListRespDto": {
                "type": "object",
                "properties": {
                    "combinationName": {
                        "type": "string",
                        "description": "combination name",
                        "example": "jewellery-diamond"
                    },
                    "fairList": {
                        "description": "fair list with display name",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FairNameDto"
                        }
                    }
                },
                "required": [
                    "combinationName",
                    "fairList"
                ]
            },
            "ProfileForEditRespDto": {
                "type": "object",
                "properties": {}
            },
            "UpdateProfileFrontendReqDto": {
                "type": "object",
                "properties": {}
            },
            "GetBuyerDetailsForExhbrRespDto": {
                "type": "object",
                "properties": {}
            },
            "UpdateProductInterestPerFairReqDto": {
                "type": "object",
                "properties": {}
            },
            "UpdateProfileBackendReqDto": {
                "type": "object",
                "properties": {
                    "preferredLanguage": {
                        "type": "string",
                        "description": "string of preferredLanguage, possible value including en, tc, sc, allow empty string",
                        "example": "tc"
                    }
                }
            },
            "CaptchaVerifyRequestDto": {
                "type": "object",
                "properties": {
                    "ip": {
                        "type": "string",
                        "description": "The client IP address",
                        "example": "122.152.158.136"
                    },
                    "ticket": {
                        "type": "string",
                        "description": "The captcha ticket provided by captcha provider after its vaildation",
                        "example": ""
                    },
                    "randstr": {
                        "type": "string",
                        "description": "The captcha random string is required by tencent only after its validation",
                        "example": ""
                    }
                },
                "required": [
                    "ip",
                    "ticket"
                ]
            },
            "CaptchaDto": {
                "type": "object",
                "properties": {
                    "providerId": {
                        "type": "string",
                        "description": "The captcha provider (e.g. tencent/ recaptcha)",
                        "example": "recaptcha"
                    },
                    "verifyRequest": {
                        "description": "The incoming request to verify the captcha",
                        "example": {
                            "ip": "122.152.158.136",
                            "ticket": "",
                            "randstr": ""
                        },
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/CaptchaVerifyRequestDto"
                            }
                        ]
                    }
                },
                "required": [
                    "providerId",
                    "verifyRequest"
                ]
            },
            "CaptchaSuccessfulResponseDto": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "string",
                        "example": "true"
                    }
                },
                "required": [
                    "success"
                ]
            },
            "C2MParticipantStatusDto": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "number",
                        "description": "C2m Participant Status Id",
                        "example": 1
                    }
                },
                "required": [
                    "status"
                ]
            },
            "C2MParticipantStatusListDto": {
                "type": "object",
                "properties": {
                    "actions": {
                        "description": "Array of registrationRecordId and status pair ",
                        "example": "\"actions\": [{\"registrationRecordId\": 1,\"status\": 1}]",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "actions"
                ]
            },
            "RegistrationRequestDto": {
                "type": "object",
                "properties": {
                    "fairCode": {
                        "type": "string",
                        "description": "Fair Code",
                        "example": "hkjewellery"
                    },
                    "emailId": {
                        "type": "string",
                        "description": "emailId, regexp: /^(([^<>()[]\\.,;:s@\"]+(.[^<>()[]\\.,;:s@\"]+)*)|(\".+\"))@(([[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}])|(([a-zA-Z-0-9]+.)+[a-zA-Z]{2,}))$/",
                        "example": "temp@gmail.com"
                    },
                    "lang": {
                        "type": "string",
                        "description": "lang",
                        "example": "en"
                    },
                    "slug": {
                        "type": "string",
                        "description": "slug",
                        "example": "/event/hkjewellery/en/form/elementor-17026/"
                    },
                    "useDummy": {
                        "type": "string",
                        "description": "Use the Dummy Template",
                        "example": "true"
                    }
                },
                "required": [
                    "fairCode"
                ]
            },
            "RegistrationSuccessfulResponseDto": {
                "type": "object",
                "properties": {
                    "eligibility": {
                        "type": "boolean",
                        "description": "eligibility",
                        "example": true
                    },
                    "code": {
                        "type": "string",
                        "description": "code",
                        "example": "ELIGIBLE"
                    },
                    "registrationFormUrl": {
                        "type": "string",
                        "description": "registration Form",
                        "example": ""
                    }
                },
                "required": [
                    "eligibility",
                    "code"
                ]
            },
            "FairSettingSuccessfulResponseDto": {
                "type": "object",
                "properties": {
                    "timestamp": {
                        "type": "number",
                        "example": "1634609620918"
                    },
                    "status": {
                        "type": "number",
                        "example": "200"
                    },
                    "data": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/RegistrationSuccessfulResponseDto"
                            }
                        ]
                    }
                },
                "required": [
                    "timestamp",
                    "status",
                    "data"
                ]
            },
            "RegistrationRequestV2Dto": {
                "type": "object",
                "properties": {
                    "fairCode": {
                        "type": "string",
                        "description": "Fair Code",
                        "example": "hkjewellery"
                    },
                    "emailId": {
                        "type": "string",
                        "description": "emailId, regexp: /^(([^<>()[]\\.,;:s@\"]+(.[^<>()[]\\.,;:s@\"]+)*)|(\".+\"))@(([[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}])|(([a-zA-Z-0-9]+.)+[a-zA-Z]{2,}))$/",
                        "example": "temp@gmail.com"
                    },
                    "lang": {
                        "type": "string",
                        "description": "lang",
                        "example": "en"
                    },
                    "slug": {
                        "type": "string",
                        "description": "short slug",
                        "example": "organic-buyer-registration-form"
                    },
                    "useDummy": {
                        "type": "string",
                        "description": "Use the Dummy Template",
                        "example": "true"
                    }
                },
                "required": [
                    "fairCode"
                ]
            },
            "SubmitFormRequestDto": {
                "type": "object",
                "properties": {
                    "fairCode": {
                        "type": "string",
                        "description": "fair code",
                        "example": "hkjewellery"
                    },
                    "submitType": {
                        "type": "string",
                        "description": "form submit type",
                        "example": "VALIDATE_STEP"
                    },
                    "formDataJson": {
                        "type": "string",
                        "description": "stringify form json",
                        "example": "{}"
                    },
                    "captcha": {
                        "type": "string",
                        "description": "captcha, format {providerId},{ticket},{randstr}",
                        "example": "recaptcha,{ticket}"
                    },
                    "step": {
                        "type": "number",
                        "description": "no. of form step, start with 1",
                        "example": 1
                    },
                    "formSubmissionKey": {
                        "type": "string",
                        "description": "form submission key, to be validated except first step validation",
                        "example": "form_submission_uuidv4"
                    },
                    "lang": {
                        "type": "string",
                        "description": "lang",
                        "example": "en"
                    },
                    "visitorType": {
                        "type": "string",
                        "description": "visitorType from reg link",
                        "example": "00"
                    },
                    "slug": {
                        "type": "string",
                        "description": "slug from reg link",
                        "example": "/hkjewellery/cache/forms/17026"
                    },
                    "country": {
                        "type": "string",
                        "description": "country from reg link, optional field, support 'non_china' or 'china'",
                        "example": "non_china"
                    },
                    "refOffice": {
                        "type": "string",
                        "description": "regional office code from reg link, optional, for ref only",
                        "example": "HK"
                    },
                    "refCode": {
                        "type": "string",
                        "description": "ref code from reg link, optional",
                        "example": "HK"
                    },
                    "regLinkId": {
                        "type": "string",
                        "description": "regLinkId from reg link",
                        "example": "e4867efdc4fb8a04a1f3fff1fa07e998"
                    }
                },
                "required": [
                    "fairCode",
                    "submitType",
                    "formDataJson",
                    "captcha",
                    "step",
                    "lang",
                    "visitorType",
                    "slug",
                    "regLinkId"
                ]
            },
            "FormStepValidStatusDto": {
                "type": "object",
                "properties": {
                    "formStepId": {
                        "type": "string",
                        "description": "formStepId",
                        "example": "form_step_1"
                    },
                    "isStepValid": {
                        "type": "boolean",
                        "description": "isStepValid",
                        "example": false
                    }
                },
                "required": [
                    "formStepId",
                    "isStepValid"
                ]
            },
            "FormValidationErrorDto": {
                "type": "object",
                "properties": {
                    "formStepId": {
                        "type": "string",
                        "description": "formStepId",
                        "example": "form_step_1"
                    },
                    "fieldId": {
                        "type": "string",
                        "description": "fieldId",
                        "example": "br_address_5_8.br_address_country"
                    },
                    "formValidationErrorType": {
                        "type": "string",
                        "description": "formValidationErrorCode",
                        "example": "required"
                    },
                    "formValidationErrorCode": {
                        "type": "string",
                        "description": "formValidationErrorCode",
                        "example": "0001"
                    }
                },
                "required": [
                    "formStepId",
                    "fieldId",
                    "formValidationErrorType",
                    "formValidationErrorCode"
                ]
            },
            "SubmitFormResponseDto": {
                "type": "object",
                "properties": {
                    "formStepValidStatus": {
                        "description": "validation status per step",
                        "example": [
                            {
                                "formStepId": "form_step_1",
                                "isStepValid": false
                            }
                        ],
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FormStepValidStatusDto"
                        }
                    },
                    "submitType": {
                        "type": "string",
                        "description": "form submit type",
                        "example": "VALIDATE_STEP"
                    },
                    "validationStatus": {
                        "type": "string",
                        "description": "validation status",
                        "example": "STEP_PASSED"
                    },
                    "isSubmitSuccess": {
                        "type": "boolean",
                        "description": "form submit status",
                        "example": false
                    },
                    "registrationNo": {
                        "type": "string",
                        "description": "registrationNo",
                        "example": "222209220801007"
                    },
                    "formValidationError": {
                        "description": "field error list",
                        "example": [
                            {
                                "formId": "123456",
                                "formStepId": "form_step_1",
                                "fieldId": "br_address_5_8.br_address_country",
                                "formValidationErrorCode": "0001"
                            }
                        ],
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FormValidationErrorDto"
                        }
                    },
                    "formSubmissionKey": {
                        "type": "string",
                        "description": "form submission key",
                        "example": "form_submission_uuidv4"
                    },
                    "slug": {
                        "type": "string",
                        "description": "slug of the form",
                        "example": "/event/hkjewellery/en/form/organic-buyer-registration-form/"
                    }
                },
                "required": [
                    "formStepValidStatus",
                    "submitType",
                    "validationStatus",
                    "isSubmitSuccess",
                    "formValidationError",
                    "formSubmissionKey",
                    "slug"
                ]
            },
            "SubmitAORFormRequestDto": {
                "type": "object",
                "properties": {
                    "fairCode": {
                        "type": "string",
                        "description": "fair code",
                        "example": "hkjewellery"
                    },
                    "submitType": {
                        "type": "string",
                        "description": "form submit type",
                        "example": "VALIDATE_STEP"
                    },
                    "formDataJson": {
                        "type": "string",
                        "description": "stringify form json",
                        "example": "{}"
                    },
                    "captcha": {
                        "type": "string",
                        "description": "captcha, format {providerId},{ticket},{randstr}",
                        "example": "recaptcha,{ticket}"
                    },
                    "step": {
                        "type": "number",
                        "description": "no. of form step, start with 1",
                        "example": 1
                    },
                    "formSubmissionKey": {
                        "type": "string",
                        "description": "form submission key, to be validated except first step validation",
                        "example": "form_submission_uuidv4"
                    },
                    "lang": {
                        "type": "string",
                        "description": "lang",
                        "example": "en"
                    },
                    "visitorType": {
                        "type": "string",
                        "description": "visitorType from reg link",
                        "example": "00"
                    },
                    "slug": {
                        "type": "string",
                        "description": "slug from reg link",
                        "example": "/hkjewellery/cache/forms/17026"
                    },
                    "country": {
                        "type": "string",
                        "description": "country from reg link, optional field, support 'non_china' or 'china'",
                        "example": "non_china"
                    },
                    "refOffice": {
                        "type": "string",
                        "description": "regional office code from reg link, optional, for ref only",
                        "example": "HK"
                    },
                    "refCode": {
                        "type": "string",
                        "description": "ref code from reg link, optional",
                        "example": "HK"
                    },
                    "regLinkId": {
                        "type": "string",
                        "description": "regLinkId from reg link",
                        "example": "e4867efdc4fb8a04a1f3fff1fa07e998"
                    }
                },
                "required": [
                    "fairCode",
                    "submitType",
                    "formDataJson",
                    "captcha",
                    "step",
                    "lang",
                    "visitorType",
                    "slug",
                    "regLinkId"
                ]
            },
            "SubmitAORFormResponseDto": {
                "type": "object",
                "properties": {
                    "formStepValidStatus": {
                        "description": "validation status per step",
                        "example": [
                            {
                                "formStepId": "form_step_1",
                                "isStepValid": false
                            }
                        ],
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FormStepValidStatusDto"
                        }
                    },
                    "submitType": {
                        "type": "string",
                        "description": "form submit type",
                        "example": "VALIDATE_STEP"
                    },
                    "validationStatus": {
                        "type": "string",
                        "description": "validation status",
                        "example": "STEP_PASSED"
                    },
                    "isSubmitSuccess": {
                        "type": "boolean",
                        "description": "form submit status",
                        "example": false
                    },
                    "registrationResultArray": {
                        "description": "registrationResultArray",
                        "example": "222209220801007",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "formValidationError": {
                        "description": "field error list",
                        "example": [
                            {
                                "formId": "123456",
                                "formStepId": "form_step_1",
                                "fieldId": "br_address_5_8.br_address_country",
                                "formValidationErrorCode": "0001"
                            }
                        ],
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FormValidationErrorDto"
                        }
                    },
                    "formSubmissionKey": {
                        "type": "string",
                        "description": "form submission key",
                        "example": "form_submission_uuidv4"
                    },
                    "slug": {
                        "type": "string",
                        "description": "slug of the form",
                        "example": "/event/hkjewellery/en/form/organic-buyer-registration-form/"
                    }
                },
                "required": [
                    "formStepValidStatus",
                    "submitType",
                    "validationStatus",
                    "isSubmitSuccess",
                    "formValidationError",
                    "formSubmissionKey",
                    "slug"
                ]
            },
            "SubmitCombinedFairFormRequestDto": {
                "type": "object",
                "properties": {
                    "fairCode": {
                        "type": "string",
                        "description": "from fair code",
                        "example": "hkjewellery"
                    },
                    "toRegisterFairCode": {
                        "type": "string",
                        "description": "to fair code",
                        "example": "hkgdp"
                    },
                    "formDataJson": {
                        "type": "string",
                        "description": "stringify form json",
                        "example": "{}"
                    },
                    "captcha": {
                        "type": "string",
                        "description": "captcha, format {providerId},{ticket},{randstr}",
                        "example": "recaptcha,{ticket}"
                    },
                    "formSubmissionKey": {
                        "type": "string",
                        "description": "form submission key, to be validated except first step validation",
                        "example": "form_submission_uuidv4"
                    },
                    "lang": {
                        "type": "string",
                        "description": "lang",
                        "example": "en"
                    },
                    "slug": {
                        "type": "string",
                        "description": "slug from reg link",
                        "example": "/hkjewellery/cache/forms/17026"
                    }
                },
                "required": [
                    "fairCode",
                    "toRegisterFairCode",
                    "formDataJson",
                    "captcha",
                    "lang",
                    "slug"
                ]
            },
            "EditFormValidationErrorDto": {
                "type": "object",
                "properties": {
                    "fieldId": {
                        "type": "string",
                        "description": "fieldId",
                        "example": "br_address_5_8.br_address_country"
                    },
                    "formValidationErrorType": {
                        "type": "string",
                        "description": "formValidationErrorCode",
                        "example": "required"
                    },
                    "formValidationErrorCode": {
                        "type": "string",
                        "description": "formValidationErrorCode",
                        "example": "0001"
                    }
                },
                "required": [
                    "fieldId",
                    "formValidationErrorType",
                    "formValidationErrorCode"
                ]
            },
            "SubmitCombinedFairFormResponseDto": {
                "type": "object",
                "properties": {
                    "isSubmitSuccess": {
                        "type": "boolean",
                        "description": "form submit status",
                        "example": false
                    },
                    "formValidationError": {
                        "description": "field error list",
                        "example": [
                            {
                                "formId": "123456",
                                "fieldId": "br_address_5_8.br_address_country",
                                "formValidationErrorCode": "0001"
                            }
                        ],
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EditFormValidationErrorDto"
                        }
                    },
                    "formSubmissionKey": {
                        "type": "string",
                        "description": "form submission key",
                        "example": "form_submission_uuidv4"
                    },
                    "slug": {
                        "type": "string",
                        "description": "slug of the form",
                        "example": "/event/hkjewellery/en/form/organic-buyer-registration-form/"
                    },
                    "registrationNo": {
                        "type": "string",
                        "description": "registrationNo",
                        "example": "222209220801007"
                    }
                },
                "required": [
                    "isSubmitSuccess",
                    "formValidationError",
                    "formSubmissionKey",
                    "slug"
                ]
            },
            "SubmitShortRegReqDto": {
                "type": "object",
                "properties": {
                    "fairCode": {
                        "type": "string",
                        "description": "fair code",
                        "example": "hkjewellery"
                    },
                    "ssoUid": {
                        "type": "string",
                        "description": "ssouid",
                        "example": "05c4920867764ed3880b921cf812a65d"
                    },
                    "euConsentStatus": {
                        "type": "boolean",
                        "description": "eu consent",
                        "example": "true"
                    },
                    "badgeConsent": {
                        "type": "boolean",
                        "description": "badge consent",
                        "example": "true"
                    },
                    "c2mConsent": {
                        "type": "boolean",
                        "description": "c2m consent",
                        "example": "true"
                    },
                    "registrationDetailConsent": {
                        "type": "boolean",
                        "description": "registration detail consent",
                        "example": "true"
                    }
                },
                "required": [
                    "fairCode",
                    "ssoUid",
                    "euConsentStatus",
                    "badgeConsent",
                    "c2mConsent",
                    "registrationDetailConsent"
                ]
            },
            "SubmitShortRegRespDto": {
                "type": "object",
                "properties": {
                    "isSubmitSuccess": {
                        "type": "boolean",
                        "description": "form submit status",
                        "example": false
                    },
                    "registrationNo": {
                        "type": "string",
                        "description": "registrationNo",
                        "example": "222209220801007"
                    },
                    "error": {
                        "type": "string",
                        "description": "fail to register reason",
                        "example": "LOGGED_IN_LOWER_PARTICIPANT_TYPE"
                    }
                },
                "required": [
                    "isSubmitSuccess"
                ]
            },
            "UpdateRegistrationStatusRequestDto": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "number",
                        "example": 1,
                        "enum": [
                            1,
                            2,
                            3,
                            5
                        ]
                    }
                },
                "required": [
                    "status"
                ]
            },
            "UpdateRegistrationStatusResponseDto": {
                "type": "object",
                "properties": {
                    "result": {
                        "type": "string",
                        "example": "success"
                    }
                },
                "required": [
                    "result"
                ]
            },
            "RegistrationIDStatusDto": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "number",
                        "example": 1,
                        "enum": [
                            1,
                            2,
                            3,
                            5
                        ]
                    },
                    "registrationRecordId": {
                        "type": "number",
                        "example": 1
                    }
                },
                "required": [
                    "status",
                    "registrationRecordId"
                ]
            },
            "BulkUpdateRegistrationStatusRequestDto": {
                "type": "object",
                "properties": {
                    "actions": {
                        "example": [
                            {
                                "registrationRecordId": 1,
                                "status": 1
                            }
                        ],
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RegistrationIDStatusDto"
                        }
                    }
                },
                "required": [
                    "actions"
                ]
            },
            "FairRegistrationRemarkReqDto": {
                "type": "object",
                "properties": {
                    "cbmRemark": {
                        "type": "string",
                        "description": "CBM Remark",
                        "example": "CBM Remark",
                        "maxLength": 30000
                    },
                    "vpRemark": {
                        "type": "string",
                        "description": "VP Remark",
                        "example": "VP Remark",
                        "maxLength": 30000
                    },
                    "generalBuyerRemark": {
                        "type": "string",
                        "description": "General Buyer Remark",
                        "example": "General Buyer Remark",
                        "maxLength": 30000
                    }
                }
            },
            "GenerateRegFormLinkReqDto": {
                "type": "object",
                "properties": {
                    "fairCode": {
                        "type": "string",
                        "description": "Single Value",
                        "example": "hkjewellery"
                    },
                    "slug": {
                        "type": "string",
                        "description": "extracted slug value, Single Value",
                        "example": "organic-buyer-registration-form"
                    },
                    "lang": {
                        "type": "string",
                        "description": "Single Value",
                        "example": "en"
                    },
                    "visitorType": {
                        "type": "string",
                        "description": "Multiple Value",
                        "example": "00;01"
                    },
                    "country": {
                        "type": "string",
                        "description": "Single Value",
                        "example": "non_china"
                    },
                    "refOverseasOffice": {
                        "type": "string",
                        "description": "Multiple Value",
                        "example": "ay;bj"
                    },
                    "refCode": {
                        "type": "string",
                        "description": "Multiple Value",
                        "example": "abc;bce;dfg123"
                    },
                    "projectYear": {
                        "type": "string",
                        "description": "vms project year, Single Value",
                        "example": "2122"
                    },
                    "formType": {
                        "type": "string",
                        "description": "extracted form value, Single Value",
                        "example": "Organic"
                    },
                    "formName": {
                        "type": "string",
                        "description": "extracted form value, Single Value",
                        "example": "Organic Buyer Registration Form"
                    }
                },
                "required": [
                    "fairCode",
                    "slug",
                    "visitorType",
                    "projectYear",
                    "formType",
                    "formName"
                ]
            },
            "InvalidateRegistrationReqDto": {
                "type": "object",
                "properties": {
                    "fairCode": {
                        "type": "string",
                        "description": "fairCode",
                        "example": "hkjewellery"
                    },
                    "fiscalYear": {
                        "type": "string",
                        "description": "fiscalYear",
                        "example": "2122"
                    },
                    "contactEmail": {
                        "type": "string",
                        "description": "contactEmail",
                        "example": "temp@gmail.com"
                    }
                },
                "required": [
                    "fairCode",
                    "fiscalYear",
                    "contactEmail"
                ]
            },
            "SubmitCustomFormReqDto": {
                "type": "object",
                "properties": {
                    "fairCode": {
                        "type": "string",
                        "description": "fair code",
                        "example": "hkjewellery"
                    },
                    "lang": {
                        "type": "string",
                        "description": "lang",
                        "example": "en"
                    },
                    "submitType": {
                        "type": "string",
                        "description": "form submit type",
                        "example": "VALIDATE_STEP"
                    },
                    "formDataJson": {
                        "type": "string",
                        "description": "stringify form json",
                        "example": "{}"
                    },
                    "captcha": {
                        "type": "string",
                        "description": "captcha, format {providerId},{ticket},{randstr}",
                        "example": "recaptcha,{ticket}"
                    },
                    "step": {
                        "type": "number",
                        "description": "no. of form step, start with 1",
                        "example": 1
                    },
                    "slug": {
                        "type": "string",
                        "description": "slug from reg link",
                        "example": "/hkjewellery/cache/forms/17026"
                    },
                    "formSubmissionKey": {
                        "type": "string",
                        "description": "formSubmissionKey",
                        "example": "form_submission_fc81baf4-b378-4a4a-b77c-8e6649275a7b"
                    }
                },
                "required": [
                    "fairCode",
                    "lang",
                    "submitType",
                    "formDataJson",
                    "captcha",
                    "step",
                    "slug",
                    "formSubmissionKey"
                ]
            },
            "SubmitEnquiryFormReqDto": {
                "type": "object",
                "properties": {
                    "fairCode": {
                        "type": "string",
                        "description": "fair code",
                        "example": "hkjewellery"
                    },
                    "lang": {
                        "type": "string",
                        "description": "lang",
                        "example": "en"
                    },
                    "submitType": {
                        "type": "string",
                        "description": "form submit type",
                        "example": "VALIDATE_STEP"
                    },
                    "formDataJson": {
                        "type": "string",
                        "description": "stringify form json",
                        "example": "{}"
                    },
                    "captcha": {
                        "type": "string",
                        "description": "captcha, format {providerId},{ticket},{randstr}",
                        "example": "recaptcha,{ticket}"
                    },
                    "step": {
                        "type": "number",
                        "description": "no. of form step, start with 1",
                        "example": 1
                    },
                    "slug": {
                        "type": "string",
                        "description": "slug",
                        "example": "enquiry"
                    },
                    "formSubmissionKey": {
                        "type": "string",
                        "description": "formSubmissionKey",
                        "example": "form_submission_fc81baf4-b378-4a4a-b77c-8e6649275a7b"
                    }
                },
                "required": [
                    "fairCode",
                    "lang",
                    "submitType",
                    "formDataJson",
                    "captcha",
                    "step",
                    "slug",
                    "formSubmissionKey"
                ]
            },
            "BuyerImportUpdateRequestDto": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "status",
                        "example": "UPLOADING"
                    }
                },
                "required": [
                    "status"
                ]
            },
            "BuyerImportRegistrationResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "description": "id",
                        "example": 1
                    },
                    "taskId": {
                        "type": "string",
                        "description": "taskId",
                        "example": "1"
                    },
                    "originalFileName": {
                        "type": "string",
                        "description": "originalFileName",
                        "example": "023-02-01 Full Data Export_Visitor_Records_sample.xlsx"
                    },
                    "uploadFileS3ObjectRefId": {
                        "type": "string",
                        "description": "uploadFileS3ObjectRefId",
                        "example": "2ce2e235-e316-4e1a-b9c7-b431d9f1a2bd"
                    },
                    "failureReportS3ObjectRefId": {
                        "type": "string",
                        "description": "failureReportS3ObjectRefId",
                        "example": "76038231-6df3-4cea-afce-38f04edea459"
                    },
                    "fairCode": {
                        "type": "string",
                        "description": "fairCode",
                        "example": "hkjewellery"
                    },
                    "fiscalYear": {
                        "type": "string",
                        "description": "fiscalYear",
                        "example": "2023"
                    },
                    "projectYear": {
                        "type": "string",
                        "description": "projectYear",
                        "example": "2021"
                    },
                    "actionType": {
                        "type": "string",
                        "description": "actionType",
                        "example": "INSERT_PAST_BUYER"
                    },
                    "sourceType": {
                        "type": "string",
                        "description": "sourceType",
                        "example": "08"
                    },
                    "visitorType": {
                        "type": "string",
                        "description": "visitorType",
                        "example": "01"
                    },
                    "participantTypeId": {
                        "type": "number",
                        "description": "participantTypeId",
                        "example": 1
                    },
                    "tier": {
                        "type": "string",
                        "description": "tier",
                        "example": "GENERAL"
                    },
                    "serialNumberStart": {
                        "type": "number",
                        "description": "serialNumberStart",
                        "example": 1
                    },
                    "numberOfRow": {
                        "type": "number",
                        "description": "numberOfRow",
                        "example": 200000
                    },
                    "status": {
                        "type": "string",
                        "description": "status",
                        "example": "PENDING"
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "createdBy",
                        "example": "SYSTEM"
                    },
                    "creationTime": {
                        "type": "object",
                        "description": "creationTime",
                        "example": "2021-11-02T22:00:19.000Z"
                    },
                    "lastUpdatedBy": {
                        "type": "string",
                        "description": "lastUpdatedBy",
                        "example": "SYSTEM"
                    },
                    "lastUpdatedTime": {
                        "type": "object",
                        "description": "creationTime",
                        "example": "2021-11-02T22:00:19.000Z"
                    },
                    "deletionTime": {
                        "type": "object",
                        "description": "deletionTime",
                        "example": "2021-11-02T22:00:19.000Z"
                    }
                },
                "required": [
                    "id"
                ]
            },
            "BuyerImportCreateTaskRequestDto": {
                "type": "object",
                "properties": {
                    "originalFileName": {
                        "type": "string",
                        "description": "Original File Name",
                        "example": "insert_vep_template.xlsx"
                    },
                    "fairCode": {
                        "type": "string",
                        "description": "Fair Code",
                        "example": "hkjewellery"
                    },
                    "fiscalYear": {
                        "type": "string",
                        "description": "Fiscal Year (2122 means 2021-2022)",
                        "example": "2122"
                    },
                    "projectYear": {
                        "type": "string",
                        "description": "Project Year",
                        "example": "2021"
                    },
                    "actionType": {
                        "type": "string",
                        "description": "Action Type",
                        "example": "VEP_UPDATE_BUYER",
                        "enum": [
                            "INSERT_PAST_BUYER",
                            "INSERT_ONSITE_BUYER",
                            "VEP_INSERT_BUYER",
                            "VEP_UPDATE_BUYER",
                            "INSERT_BUYER_WITH_BM_TENTATIVE",
                            "VEP_REG_BUYER"
                        ]
                    },
                    "sourceType": {
                        "type": "string",
                        "description": "Source Type",
                        "example": "08"
                    },
                    "visitorType": {
                        "type": "string",
                        "description": "Visitor Type",
                        "example": "01"
                    },
                    "serialNumberStart": {
                        "type": "number",
                        "description": "Serial Number Start",
                        "example": "100"
                    }
                },
                "required": [
                    "originalFileName",
                    "fairCode",
                    "fiscalYear",
                    "projectYear",
                    "actionType",
                    "sourceType",
                    "visitorType"
                ]
            },
            "GetNextSerialNumberResponseDto": {
                "type": "object",
                "properties": {}
            },
            "ORSParticipantImportRequestDto": {
                "type": "object",
                "properties": {
                    "registrationStatus": {
                        "type": "string",
                        "description": "Registration Status",
                        "example": "INCOMPLETE"
                    },
                    "registrationNo": {
                        "type": "string",
                        "description": "Registration Number len: 15",
                        "example": ""
                    },
                    "projectNum": {
                        "type": "string",
                        "description": "VMS Project Number",
                        "example": "007"
                    },
                    "projectYear": {
                        "type": "string",
                        "description": "Project Year",
                        "example": "2022"
                    },
                    "ssoUid": {
                        "type": "string",
                        "description": "SSO Uid",
                        "example": ""
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display Name",
                        "example": ""
                    },
                    "title": {
                        "type": "string",
                        "description": "title",
                        "example": "Mr"
                    },
                    "email": {
                        "type": "string",
                        "description": "Contact email for SSO login",
                        "example": ""
                    },
                    "correspondenceEmail": {
                        "type": "string",
                        "description": "Correspondence Email",
                        "example": ""
                    },
                    "firstName": {
                        "type": "string",
                        "description": "User first name",
                        "example": "Alex"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "User last name",
                        "example": "Chan"
                    },
                    "position": {
                        "type": "string",
                        "description": "User job position",
                        "example": ""
                    },
                    "companyName": {
                        "type": "string",
                        "description": "User company name",
                        "example": ""
                    },
                    "countryCode": {
                        "type": "string",
                        "description": "Country Code according to Council-Master-List",
                        "example": "HKG"
                    },
                    "generalParticipantRemark": {
                        "type": "string",
                        "description": "General Participant Remark",
                        "example": ""
                    },
                    "ticketPassCode": {
                        "type": "string",
                        "description": "Pre-defined ticket pass code in Conference",
                        "example": ""
                    },
                    "promotionCode": {
                        "type": "string",
                        "description": "Pre-defined promotion code in Conference",
                        "example": ""
                    },
                    "shownInPartiList": {
                        "type": "string",
                        "description": "Shown in Participant List flag when registration status is 'CONFIRMED'",
                        "example": "Y"
                    },
                    "customQuestionList": {
                        "description": "List of custom question answer",
                        "example": [
                            {
                                "questionNum": "1",
                                "questionAns": "201"
                            }
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "registrationStatus",
                    "registrationNo",
                    "projectNum",
                    "projectYear",
                    "ssoUid",
                    "displayName",
                    "title",
                    "email",
                    "firstName",
                    "lastName",
                    "countryCode",
                    "ticketPassCode",
                    "shownInPartiList"
                ]
            },
            "ORSParticipantImportResponseDto": {
                "type": "object",
                "properties": {}
            },
            "ORSParticipantImportV2RequestDto": {
                "type": "object",
                "properties": {
                    "registrationStatus": {
                        "type": "string",
                        "description": "Registration Status",
                        "example": "INCOMPLETE"
                    },
                    "registrationNo": {
                        "type": "string",
                        "description": "Registration Number len: 15",
                        "example": ""
                    },
                    "projectNum": {
                        "type": "string",
                        "description": "VMS Project Number",
                        "example": "007"
                    },
                    "projectYear": {
                        "type": "string",
                        "description": "Project Year",
                        "example": "2022"
                    },
                    "ssoUid": {
                        "type": "string",
                        "description": "SSO Uid",
                        "example": ""
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display Name",
                        "example": ""
                    },
                    "title": {
                        "type": "string",
                        "description": "title",
                        "example": "Mr"
                    },
                    "email": {
                        "type": "string",
                        "description": "Contact email for SSO login",
                        "example": ""
                    },
                    "correspondenceEmail": {
                        "type": "string",
                        "description": "Correspondence Email",
                        "example": ""
                    },
                    "firstName": {
                        "type": "string",
                        "description": "User first name",
                        "example": "Alex"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "User last name",
                        "example": "Chan"
                    },
                    "position": {
                        "type": "string",
                        "description": "User job position",
                        "example": ""
                    },
                    "companyName": {
                        "type": "string",
                        "description": "User company name",
                        "example": ""
                    },
                    "countryCode": {
                        "type": "string",
                        "description": "Country Code according to Council-Master-List",
                        "example": "HKG"
                    },
                    "generalParticipantRemark": {
                        "type": "string",
                        "description": "General Participant Remark",
                        "example": ""
                    },
                    "ticketPassCode": {
                        "type": "string",
                        "description": "Pre-defined ticket pass code in Conference",
                        "example": ""
                    },
                    "promotionCode": {
                        "type": "string",
                        "description": "Pre-defined promotion code in Conference",
                        "example": ""
                    },
                    "shownInPartiList": {
                        "type": "string",
                        "description": "Shown in Participant List flag when registration status is 'CONFIRMED'",
                        "example": "Y"
                    },
                    "customQuestionList": {
                        "description": "List of custom question answer",
                        "example": [
                            {
                                "questionNum": "1",
                                "questionAns": "201"
                            }
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "registrationStatus",
                    "registrationNo",
                    "projectNum",
                    "projectYear",
                    "ssoUid",
                    "displayName",
                    "title",
                    "email",
                    "firstName",
                    "lastName",
                    "countryCode",
                    "ticketPassCode",
                    "shownInPartiList"
                ]
            },
            "CustomQuestionImportResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "description": "id",
                        "example": 1
                    },
                    "taskId": {
                        "type": "string",
                        "description": "taskId",
                        "example": "001"
                    },
                    "originalFileName": {
                        "type": "string",
                        "description": "originalFileName",
                        "example": "023-02-01 Full Data Export_Visitor_Records_sample.xlsx"
                    },
                    "fairCode": {
                        "type": "string",
                        "description": "fairCode",
                        "example": "hkjewellery"
                    },
                    "projectYear": {
                        "type": "string",
                        "description": "projectYear",
                        "example": "2021"
                    },
                    "status": {
                        "type": "string",
                        "description": "status",
                        "example": "PENDING"
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "createdBy",
                        "example": "SYSTEM"
                    },
                    "creationTime": {
                        "type": "object",
                        "description": "creationTime",
                        "example": "2021-11-02T22:00:19.000Z"
                    },
                    "lastUpdatedBy": {
                        "type": "string",
                        "description": "lastUpdatedBy",
                        "example": "SYSTEM"
                    },
                    "lastUpdatedTime": {
                        "type": "object",
                        "description": "lastUpdatedTime",
                        "example": "2021-11-02T22:00:19.000Z"
                    },
                    "deletionTime": {
                        "type": "object",
                        "description": "deletionTime",
                        "example": "2021-11-02T22:00:19.000Z"
                    },
                    "failureReportS3ObjectRefId": {
                        "type": "string",
                        "description": "failureReportS3ObjectRefId",
                        "example": "76038231-6df3-4cea-afce-38f04edea459"
                    },
                    "uploadFileS3ObjectRefId": {
                        "type": "string",
                        "description": "uploadFileS3ObjectRefId",
                        "example": "2ce2e235-e316-4e1a-b9c7-b431d9f1a2bd"
                    }
                },
                "required": [
                    "id"
                ]
            },
            "PostCustomQuestionImportReqDto": {
                "type": "object",
                "properties": {
                    "originalFileName": {
                        "type": "string",
                        "description": "Original File Name",
                        "example": "insert_template.xlsx"
                    },
                    "fairCode": {
                        "type": "string",
                        "description": "Fair Code",
                        "example": "bnr"
                    },
                    "fiscalYear": {
                        "type": "string",
                        "description": "Fiscal Year (2122 means 2021-2022)",
                        "example": "2122"
                    },
                    "projectYear": {
                        "type": "string",
                        "description": "Project Year",
                        "example": "2021"
                    }
                },
                "required": [
                    "originalFileName",
                    "fairCode",
                    "fiscalYear",
                    "projectYear"
                ]
            },
            "PostCustomQuestionImportResDto": {
                "type": "object",
                "properties": {
                    "taskId": {
                        "type": "string",
                        "description": "taskId",
                        "example": "1"
                    },
                    "originalFileName": {
                        "type": "string",
                        "description": "originalFileName",
                        "example": "023-02-01 Full Data Export_Visitor_Records_sample.xlsx"
                    },
                    "uploadFileS3ObjectRefId": {
                        "type": "string",
                        "description": "uploadFileS3ObjectRefId",
                        "example": "2ce2e235-e316-4e1a-b9c7-b431d9f1a2bd"
                    },
                    "failureReportS3ObjectRefId": {
                        "type": "string",
                        "description": "failureReportS3ObjectRefId",
                        "example": "76038231-6df3-4cea-afce-38f04edea459"
                    },
                    "fairCode": {
                        "type": "string",
                        "description": "fairCode",
                        "example": "bnr"
                    },
                    "fiscalYear": {
                        "type": "string",
                        "description": "fiscalYear",
                        "example": "2023"
                    },
                    "projectYear": {
                        "type": "string",
                        "description": "projectYear",
                        "example": "2021"
                    },
                    "status": {
                        "type": "string",
                        "description": "status",
                        "example": "PENDING"
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "createdBy",
                        "example": "SYSTEM"
                    },
                    "creationTime": {
                        "type": "object",
                        "description": "creationTime",
                        "example": "2021-11-02T22:00:19.000Z"
                    }
                }
            },
            "CustomQuestionResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "description": "id",
                        "example": 1
                    },
                    "fairCode": {
                        "type": "string",
                        "description": "fairCode",
                        "example": "hkjewellery"
                    },
                    "projectYear": {
                        "type": "string",
                        "description": "projectYear",
                        "example": "2021"
                    },
                    "questionNum": {
                        "type": "number",
                        "description": "questionNum",
                        "example": "2"
                    },
                    "parentCategoryCode": {
                        "type": "string",
                        "description": "parentCategoryCode",
                        "example": "103"
                    },
                    "categoryCode": {
                        "type": "string",
                        "description": "categoryCode",
                        "example": "103"
                    },
                    "valueEn": {
                        "type": "string",
                        "description": "valueEn",
                        "example": "test"
                    },
                    "valueTc": {
                        "type": "string",
                        "description": "valueTc",
                        "example": "測驗"
                    },
                    "valueSc": {
                        "type": "string",
                        "description": "valueSc",
                        "example": "测验"
                    },
                    "sequence": {
                        "type": "number",
                        "description": "sequence",
                        "example": 3
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "createdBy",
                        "example": "SYSTEM"
                    },
                    "creationTime": {
                        "type": "object",
                        "description": "creationTime",
                        "example": "2021-11-02T22:00:19.000Z"
                    },
                    "lastUpdatedBy": {
                        "type": "string",
                        "description": "lastUpdatedBy",
                        "example": "SYSTEM"
                    },
                    "lastUpdatedTime": {
                        "type": "object",
                        "description": "lastUpdatedTime",
                        "example": "2021-11-02T22:00:19.000Z"
                    },
                    "deletionTime": {
                        "type": "object",
                        "description": "deletionTime",
                        "example": "2021-11-02T22:00:19.000Z"
                    }
                },
                "required": [
                    "id"
                ]
            },
            "GetCustomQuestionDetail": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number"
                    },
                    "filterNum": {
                        "type": "string"
                    },
                    "questionNum": {
                        "type": "string"
                    },
                    "valueEn": {
                        "type": "string"
                    },
                    "valueTc": {
                        "type": "string"
                    },
                    "valueSc": {
                        "type": "string"
                    },
                    "categoryCode": {
                        "type": "string"
                    },
                    "parentCategoryCode": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "filterNum",
                    "questionNum",
                    "valueEn",
                    "valueTc",
                    "valueSc",
                    "categoryCode",
                    "parentCategoryCode"
                ]
            },
            "GetCustomQuestionsFilterLabelDetail": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number"
                    },
                    "filterNum": {
                        "type": "string"
                    },
                    "questionNum": {
                        "type": "string"
                    },
                    "filterNameEn": {
                        "type": "string"
                    },
                    "filterNameTc": {
                        "type": "string"
                    },
                    "filterNameSc": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "filterNum",
                    "questionNum",
                    "filterNameEn",
                    "filterNameTc",
                    "filterNameSc"
                ]
            },
            "GetCustomQuestionListResult": {
                "type": "object",
                "properties": {
                    "questions": {
                        "$ref": "#/components/schemas/GetCustomQuestionDetail"
                    },
                    "filterLabel": {
                        "$ref": "#/components/schemas/GetCustomQuestionsFilterLabelDetail"
                    }
                },
                "required": [
                    "questions",
                    "filterLabel"
                ]
            },
            "CustomQuestionFilterResponseDto": {
                "type": "object",
                "properties": {
                    "data": {
                        "description": "custom questions filter label returned",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/GetCustomQuestionListResult"
                            }
                        ]
                    }
                },
                "required": [
                    "data"
                ]
            },
            "UpdateCustomQuestionsReqDto": {
                "type": "object",
                "properties": {
                    "filterNum": {
                        "type": "number"
                    },
                    "filterNameEn": {
                        "type": "string"
                    },
                    "filterNameTc": {
                        "type": "string"
                    },
                    "filterNameSc": {
                        "type": "string"
                    },
                    "questionNum": {
                        "type": "number"
                    }
                },
                "required": [
                    "filterNum",
                    "filterNameEn",
                    "filterNameTc",
                    "filterNameSc",
                    "questionNum"
                ]
            },
            "UpdateCustomQuestionsFilterLabelReqDto": {
                "type": "object",
                "properties": {
                    "fairCode": {
                        "type": "string",
                        "description": "Fair Code",
                        "example": "hkjewellery"
                    },
                    "projectYear": {
                        "type": "string",
                        "description": "Project Year",
                        "example": "2021"
                    },
                    "fiscalYear": {
                        "type": "string",
                        "description": "Fiscal Year",
                        "example": "2022"
                    },
                    "filtersData": {
                        "description": "Filters data",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/UpdateCustomQuestionsReqDto"
                            }
                        ]
                    }
                },
                "required": [
                    "fairCode",
                    "projectYear",
                    "fiscalYear",
                    "filtersData"
                ]
            }
        }
    },
    "paths": {
        "/fair": {
            "get": {
                "operationId": "FairController_fairIndex",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/fair/{fairCode}/combinedFairDateRange": {
            "get": {
                "operationId": "FairController_getCombinedFairDateRange",
                "parameters": [
                    {
                        "name": "fairCode",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/fair/{fairCode}/dates": {
            "get": {
                "operationId": "FairController_getFairDates",
                "parameters": [
                    {
                        "name": "fairCode",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/fair/{fairCode}/combinedDates": {
            "get": {
                "operationId": "FairController_getCombinedFairDates",
                "parameters": [
                    {
                        "name": "fairCode",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/fair/{fairCode}/groupedCombinedDates/{type}": {
            "get": {
                "operationId": "FairController_getGroupedCombinedFairDates",
                "parameters": [
                    {
                        "name": "fairCode",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-USER-TZ",
                        "required": true,
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/fair/open": {
            "get": {
                "operationId": "FairController_getOpenFairs",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/fair/active": {
            "get": {
                "operationId": "FairController_getActiveFairs",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/fair/before": {
            "get": {
                "operationId": "FairController_getBeforeFairs",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/fair/list": {
            "get": {
                "operationId": "FairController_getFairListing",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/fair/accessiblelist": {
            "get": {
                "operationId": "FairController_getUserFairListing",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/fair/ssouid": {
            "get": {
                "operationId": "FairController_getSsoUidByFairCode",
                "summary": "Function to Get Buyer SsoUid by Fair Code",
                "parameters": [
                    {
                        "name": "size",
                        "required": true,
                        "in": "query",
                        "description": "Size of Buyer SsoUid",
                        "example": "10",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "fairCode",
                        "required": true,
                        "in": "query",
                        "description": "fairCode",
                        "example": "hkjewellery",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return Buyer SsoUid by Fair Code",
                        "schema": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SsoUidByFairCodeQueryDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error",
                        "schema": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorResponseDto"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/fair/fairParticipantsFilterOption/": {
            "get": {
                "operationId": "FairController_searchFairParticipantsFilterOption",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/fair/searchFairParticipants": {
            "post": {
                "operationId": "FairController_searchFairParticipants",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SearchFairParticipants"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": ""
                    }
                }
            }
        },
        "/fair/searchFairParticipantsV2": {
            "post": {
                "operationId": "FairController_searchFairParticipantsV2",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SearchFairParticipants"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": ""
                    }
                }
            }
        },
        "/fair/updateC2MParticipantStatusForBuyer": {
            "post": {
                "operationId": "FairController_updateC2MParticipantStatusForBuyer",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/C2MParticipantStatus"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": ""
                    }
                }
            }
        },
        "/fair/getMultipleFairDatas": {
            "get": {
                "operationId": "FairController_getMultipleFairDatasWithCache",
                "parameters": [
                    {
                        "name": "fairCodes",
                        "required": true,
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "FairController_getMultipleFairDatas",
                "parameters": [],
                "responses": {
                    "201": {
                        "description": ""
                    }
                }
            }
        },
        "/fair/getFairParticipantProfile": {
            "post": {
                "operationId": "FairController_getFairParticipantProfile",
                "parameters": [],
                "responses": {
                    "201": {
                        "description": ""
                    }
                }
            }
        },
        "/fair/getFairParticipantStatus": {
            "post": {
                "operationId": "FairController_getFairParticipantStatus",
                "parameters": [],
                "responses": {
                    "201": {
                        "description": ""
                    }
                }
            }
        },
        "/fair/getAndSetC2MLoginStatus": {
            "post": {
                "operationId": "FairController_getAndSetC2MLoginStatus",
                "parameters": [],
                "responses": {
                    "201": {
                        "description": ""
                    }
                }
            }
        },
        "/fair/getFairDatesConfig/{fairCode}/{year}/{type}": {
            "get": {
                "operationId": "FairController_getFairDatesConfig",
                "parameters": [
                    {
                        "name": "fairCode",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "year",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/fair/postFairDatesConfig/{fairCode}/{year}": {
            "post": {
                "operationId": "FairController_postFairDatesConfig",
                "parameters": [
                    {
                        "name": "fairCode",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "year",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": ""
                    }
                }
            }
        },
        "/fair/deleteFairDatesConfig/{fairCode}": {
            "delete": {
                "operationId": "FairController_deleteFairDatesConfig",
                "parameters": [
                    {
                        "name": "fairCode",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/fair/getBuyerRegistrationStatus/{projectCode}/{projectYear}": {
            "get": {
                "operationId": "FairController_getBuyerRegistrationStatus",
                "parameters": [
                    {
                        "name": "projectCode",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectYear",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/fair/getFairParticipant": {
            "post": {
                "operationId": "FairController_getFairParticipant",
                "parameters": [],
                "responses": {
                    "201": {
                        "description": ""
                    }
                }
            }
        },
        "/fair/getCIPFairDates/{fairCode}/{fiscalYear}": {
            "get": {
                "operationId": "FairController_getCIPFairDates",
                "summary": "Return CIP fair dates",
                "parameters": [
                    {
                        "name": "fairCode",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fiscalYear",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return CIP fair dates",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "500": {
                        "description": "System error"
                    }
                }
            }
        },
        "/fair/getCIPFairDatesInAdminPortal/{fairCode}/{fiscalYear}": {
            "get": {
                "operationId": "FairController_getCIPFairDatesInAdminPortal",
                "parameters": [
                    {
                        "name": "fairCode",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fiscalYear",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/fair/buyerRegistrationSyncSNS": {
            "post": {
                "operationId": "FairController_buyerRegistrationSyncSNS",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/buyerRegistrationSyncSNSDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": ""
                    }
                }
            }
        },
        "/fair/updateWatchNowStatus": {
            "post": {
                "operationId": "FairController_updateWatchNowStatus",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/updateStatusDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": ""
                    }
                }
            }
        },
        "/fair/updatePlaybackStatus": {
            "post": {
                "operationId": "FairController_updatePlaybackStatus",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/updateStatusDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": ""
                    }
                }
            }
        },
        "/fair/retrySeminarRegistration": {
            "get": {
                "operationId": "FairController_retrySeminarRegistration",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/starSpeakers": {
            "get": {
                "operationId": "StarSpeakerController_getAllStarSpeakers",
                "parameters": [
                    {
                        "name": "vmsProjectCode",
                        "required": true,
                        "in": "query",
                        "description": "vmsProjectCode",
                        "example": "007",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "vmsProjectYear",
                        "required": true,
                        "in": "query",
                        "description": "vmsProjectYear",
                        "example": "2122",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "systemCode",
                        "required": true,
                        "in": "query",
                        "description": "systemCode",
                        "example": "VEP",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "language",
                        "required": false,
                        "in": "query",
                        "description": "language",
                        "example": "en / sc / tc",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "required": false,
                        "in": "query",
                        "description": "email",
                        "example": "xxx@xxx.com",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/conference/fair/{code}": {
            "get": {
                "operationId": "ConferenceController_checkFairType",
                "parameters": [
                    {
                        "name": "code",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/conference/speakers": {
            "get": {
                "operationId": "ConferenceController_getAllSpeakers",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/conference/programme": {
            "post": {
                "operationId": "ConferenceController_filterSeminar",
                "parameters": [],
                "responses": {
                    "201": {
                        "description": ""
                    }
                }
            }
        },
        "/conference/programme/v2": {
            "post": {
                "operationId": "ConferenceController_filterSeminarV2",
                "summary": "Get the seminar list for conference programme page",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GetSeminarsV2Dto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "return the seminar list result",
                        "schema": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetSeminarV2Response"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/conference/programme/v3": {
            "post": {
                "operationId": "ConferenceController_filterSeminarV3",
                "summary": "Get the seminar list for conference programme page",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GetSeminarsV2Dto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "return the seminar list result",
                        "schema": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetSeminarV2Response"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/conference/customQuestions": {
            "post": {
                "operationId": "ConferenceController_getCustomQuestions",
                "summary": "Function to get custom questions by fair",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GetCustomQuestionsReqDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "custom questions returned",
                        "schema": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetCustomQuestionsResDto"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/conference/participants": {
            "post": {
                "operationId": "ConferenceController_searchParticipants",
                "summary": "Function to search conference participants with criteria",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SearchConfParticipantsReqDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "participants returned",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SearchConfParticipantsResDto"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/conference/participant": {
            "post": {
                "operationId": "ConferenceController_getParticipant",
                "summary": "Function to cet conference participant by ID",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GetConfParticipantReqDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "the requested participant's detail",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetConfParticipantResDto"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/conference/countryList/{lang}": {
            "get": {
                "operationId": "ConferenceController_getCountryList",
                "summary": "Function to cet country list",
                "parameters": [
                    {
                        "name": "lang",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "country list returned",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetCountryListResDto"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/conference/profile/searchParticipantType": {
            "post": {
                "operationId": "ConferenceController_searchParticipantType",
                "summary": "Function to Return Participant Type By Fair",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ParticipantTypeSearchDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Return Exhibitor Participant Type",
                        "schema": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ParticipantTypeByFairListDto"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/conference/getSeminarRegistrations": {
            "post": {
                "operationId": "ConferenceController_getSeminarRegistrations",
                "summary": "Function to get user's seminar registrations",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GetSeminarRegistrationsReqDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "seminar registrations returned",
                        "schema": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetSeminarRegistrationsResDto"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/conference/updateSeminarRegistration": {
            "post": {
                "operationId": "ConferenceController_updateSeminarRegistration",
                "summary": "Function to update seminar registration's watchNowStatus or playBackStatus",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateSeminarRegistrationReqDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Return success or fail",
                        "schema": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateSeminarRegistrationResDto"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/conference/fairTicketPass": {
            "get": {
                "operationId": "ConferenceController_getFairTicketPass",
                "summary": "Get fair ticket pass",
                "parameters": [
                    {
                        "name": "fairCode",
                        "required": true,
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectYear",
                        "required": true,
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "return fair ticket pass",
                        "schema": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetFairTicketPassResDto"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/conference/updateParticipant/{id}": {
            "put": {
                "operationId": "ConferenceController_updateParticipantTicketandNoteById",
                "summary": "update ticket pass and remark of participant by Id",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ParticipantTicketPassNoteReqDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/conference/c2m-participant-statusV2": {
            "put": {
                "operationId": "ConferenceController_updateCToMParticipantStatusListV2",
                "summary": "Update the c2m participant status by List (ParticipantList Batch2)",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConferenceC2MParticipantStatusListDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/conference/{sbeSeminarId}/eventDetail": {
            "get": {
                "operationId": "ConferenceController_findConfOneSeminarEventDetail",
                "summary": "Get the seminar event detail by seminar id",
                "parameters": [
                    {
                        "name": "sbeSeminarId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {},
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOneSeminarEventDetailResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/conference/{sbeSeminarId}/ended": {
            "get": {
                "operationId": "ConferenceController_checkSeminarIsEnded",
                "summary": "Check whether the seminar is ended",
                "parameters": [
                    {
                        "name": "sbeSeminarId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {},
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckSeminarIsEndedResDto"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/conference/{sbeSeminarId}": {
            "get": {
                "operationId": "ConferenceController_findOneSeminar",
                "summary": "Get the specific seminar event",
                "parameters": [
                    {
                        "name": "sbeSeminarId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "vmsProjectCode",
                        "required": true,
                        "in": "query",
                        "description": "vmsProjectCode",
                        "example": "007",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "vmsProjectYear",
                        "required": true,
                        "in": "query",
                        "description": "vmsProjectYear",
                        "example": "2122",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "systemCode",
                        "required": true,
                        "in": "query",
                        "description": "systemCode",
                        "example": "VEP",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "language",
                        "required": false,
                        "in": "query",
                        "description": "language",
                        "example": "en / sc / tc",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "required": false,
                        "in": "query",
                        "description": "email",
                        "example": "xxx@xxx.com",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {},
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOneSeminarEventDetailResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/conference/{sbeSeminarId}/v2": {
            "get": {
                "operationId": "ConferenceController_findOneSeminarV2",
                "summary": "Get the specific seminar event",
                "parameters": [
                    {
                        "name": "sbeSeminarId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "vmsProjectCode",
                        "required": true,
                        "in": "query",
                        "description": "vmsProjectCode",
                        "example": "007",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "vmsProjectYear",
                        "required": true,
                        "in": "query",
                        "description": "vmsProjectYear",
                        "example": "2122",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "systemCode",
                        "required": true,
                        "in": "query",
                        "description": "systemCode",
                        "example": "VEP",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "language",
                        "required": false,
                        "in": "query",
                        "description": "language",
                        "example": "en / sc / tc",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "required": false,
                        "in": "query",
                        "description": "email",
                        "example": "xxx@xxx.com",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {},
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOneSeminarEventDetailResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/conference/ws/joinConfSeminar": {
            "post": {
                "operationId": "ConferenceController_joinConfSeminar",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/JoinSeminarRequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": ""
                    }
                }
            }
        },
        "/rtmp": {
            "post": {
                "operationId": "RtmpController_generateRtmpByArray",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RtmpUpsertRequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": ""
                    }
                }
            }
        },
        "/rtmp/updateRtmpVODFileDetail": {
            "post": {
                "operationId": "RtmpController_updateRtmpPlaybackUrl",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RtmpPlaybackRequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": ""
                    }
                }
            }
        },
        "/video": {
            "get": {
                "operationId": "VideoController_findOne",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FindVideoRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "VideoController_upsert",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpsertVideoRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": ""
                    }
                }
            }
        },
        "/video/batchFind": {
            "post": {
                "operationId": "VideoController_batchFind",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BatchFindVideoRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": ""
                    }
                }
            }
        },
        "/video/batch": {
            "post": {
                "operationId": "VideoController_batchUpdate",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateVideosRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": ""
                    }
                }
            }
        },
        "/video/updateVodFileUrl": {
            "post": {
                "operationId": "VideoController_updateVodFileUrl",
                "parameters": [],
                "responses": {
                    "201": {
                        "description": ""
                    }
                }
            }
        },
        "/seminars/healthCheck": {
            "get": {
                "operationId": "SeminarController_healthCheck",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/seminars": {
            "get": {
                "operationId": "SeminarController_findAllSeminars",
                "parameters": [
                    {
                        "name": "vmsProjectCode",
                        "required": true,
                        "in": "query",
                        "description": "vmsProjectCode",
                        "example": "007",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "vmsProjectYear",
                        "required": true,
                        "in": "query",
                        "description": "vmsProjectYear",
                        "example": "2122",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "systemCode",
                        "required": true,
                        "in": "query",
                        "description": "systemCode",
                        "example": "VEP",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "language",
                        "required": false,
                        "in": "query",
                        "description": "language",
                        "example": "en / sc / tc",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "required": false,
                        "in": "query",
                        "description": "email",
                        "example": "xxx@xxx.com",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "SeminarController_updateSeminarEventDetail",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateSeminarRequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": ""
                    }
                }
            }
        },
        "/seminars/insertSBEDataToTable": {
            "post": {
                "operationId": "SeminarController_insertSBEDataToTable",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SbeEndpointRequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": ""
                    }
                }
            }
        },
        "/seminars/countRegisteredSeminarsByUserAndTimeRange": {
            "post": {
                "operationId": "SeminarController_countRegisteredSeminarsByUserAndTimeRange",
                "parameters": [],
                "responses": {
                    "201": {
                        "description": ""
                    }
                }
            }
        },
        "/seminars/ratings": {
            "get": {
                "operationId": "SeminarController_findRatings",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/seminars/rating": {
            "get": {
                "operationId": "SeminarController_findSelfRating",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "SeminarController_upsertRating",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpsertRatingRequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": ""
                    }
                }
            }
        },
        "/seminars/live": {
            "get": {
                "operationId": "SeminarController_getLiveSeminars",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/seminars/starSpeakersAndSeminars": {
            "get": {
                "operationId": "SeminarController_getStarSpeakersAndSeminars",
                "parameters": [
                    {
                        "name": "vmsProjectCode",
                        "required": true,
                        "in": "query",
                        "description": "vmsProjectCode",
                        "example": "007",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "vmsProjectYear",
                        "required": true,
                        "in": "query",
                        "description": "vmsProjectYear",
                        "example": "2122",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "systemCode",
                        "required": true,
                        "in": "query",
                        "description": "systemCode",
                        "example": "VEP",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "language",
                        "required": false,
                        "in": "query",
                        "description": "language",
                        "example": "en / sc / tc",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "required": false,
                        "in": "query",
                        "description": "email",
                        "example": "xxx@xxx.com",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/seminars/{sbeSeminarId}/eventDetail": {
            "get": {
                "operationId": "SeminarController_findOne",
                "parameters": [
                    {
                        "name": "sbeSeminarId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/seminars/join": {
            "post": {
                "operationId": "SeminarController_wsJoinRoom",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/JoinSeminarRequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": ""
                    }
                }
            }
        },
        "/seminars/joinSeminarCache": {
            "post": {
                "operationId": "SeminarController_joinSeminarCache",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/JoinSeminarRequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": ""
                    }
                }
            }
        },
        "/seminars/clearAllCacheByPattern": {
            "post": {
                "operationId": "SeminarController_clearAllCacheByPattern",
                "parameters": [],
                "responses": {
                    "201": {
                        "description": ""
                    }
                }
            }
        },
        "/seminars/{sbeSeminarId}": {
            "delete": {
                "operationId": "SeminarController_wsEndRoom",
                "parameters": [
                    {
                        "name": "sbeSeminarId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            },
            "get": {
                "operationId": "SeminarController_findSeminar",
                "parameters": [
                    {
                        "name": "sbeSeminarId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "vmsProjectCode",
                        "required": true,
                        "in": "query",
                        "description": "vmsProjectCode",
                        "example": "007",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "vmsProjectYear",
                        "required": true,
                        "in": "query",
                        "description": "vmsProjectYear",
                        "example": "2122",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "systemCode",
                        "required": true,
                        "in": "query",
                        "description": "systemCode",
                        "example": "VEP",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "language",
                        "required": false,
                        "in": "query",
                        "description": "language",
                        "example": "en / sc / tc",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "required": false,
                        "in": "query",
                        "description": "email",
                        "example": "xxx@xxx.com",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/seminars/checkMultiLogin": {
            "post": {
                "operationId": "SeminarController_wsCheckMultiLogin",
                "parameters": [],
                "responses": {
                    "201": {
                        "description": ""
                    }
                }
            }
        },
        "/seminars/saveSeminarRegistrationRecord": {
            "post": {
                "operationId": "SeminarController_saveSeminarRegistrationRecord",
                "summary": "Seminar Event Registration in VEP DB",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Seminar Event Registration Success in VEP DB",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": 200
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Fail to register the event in VEP DB"
                    },
                    "500": {
                        "description": "System error"
                    }
                }
            }
        },
        "/seminars/eventRegistration": {
            "post": {
                "operationId": "SeminarController_eventRegistration",
                "summary": "Seminar Event Registration",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SeminarRegistrationCommonDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Seminar Event Registration Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": 200
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Fail to register the event"
                    },
                    "500": {
                        "description": "System error"
                    }
                }
            }
        },
        "/seminars/seminarRegistration": {
            "post": {
                "operationId": "SeminarController_seminarRegistration",
                "summary": "Seminar Registration",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SeminarRegistrationForSeminarsDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Seminar Registration Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": 200
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Fail to register the seminar"
                    },
                    "500": {
                        "description": "System error"
                    }
                }
            }
        },
        "/seminars/getRegisterSeminar": {
            "post": {
                "operationId": "SeminarController_getRegisterSeminar",
                "summary": "Return Registered Seminar List",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Return Registered Seminar List",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": 200,
                                        "data": []
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "System error"
                    }
                }
            }
        },
        "/seminars/getRegisteredSeminars": {
            "post": {
                "operationId": "SeminarController_getRegisteredSeminars",
                "parameters": [],
                "responses": {
                    "201": {
                        "description": ""
                    }
                }
            }
        },
        "/seminars/findAllSeminarsForReminder": {
            "get": {
                "operationId": "SeminarController_findAllSeminarsForReminder",
                "parameters": [
                    {
                        "name": "vmsProjectCode",
                        "required": true,
                        "in": "query",
                        "description": "vmsProjectCode",
                        "example": "007",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "vmsProjectYear",
                        "required": true,
                        "in": "query",
                        "description": "vmsProjectYear",
                        "example": "2122",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "systemCode",
                        "required": true,
                        "in": "query",
                        "description": "systemCode",
                        "example": "VEP",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "language",
                        "required": false,
                        "in": "query",
                        "description": "language",
                        "example": "en / sc / tc",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "required": false,
                        "in": "query",
                        "description": "email",
                        "example": "xxx@xxx.com",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/seminars/admin/getRegisteredSeminarsForAdmin": {
            "post": {
                "operationId": "SeminarController_getRegisteredSeminarsForAdmin",
                "parameters": [],
                "responses": {
                    "201": {
                        "description": ""
                    }
                }
            }
        },
        "/seminars/seminarRegistration/reportRecord": {
            "post": {
                "operationId": "SeminarController_getSeminarReportRecord",
                "parameters": [],
                "responses": {
                    "201": {
                        "description": ""
                    }
                }
            }
        },
        "/seminars/seminarRegistration/submitSeminarReport": {
            "post": {
                "operationId": "SeminarController_submitSeminarReport",
                "parameters": [],
                "responses": {
                    "201": {
                        "description": ""
                    }
                }
            }
        },
        "/seminars/KickOffMeetingReminder": {
            "get": {
                "operationId": "SeminarController_KickOffMeetingReminder",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/seminars/exhibitorLoginReminder": {
            "get": {
                "operationId": "SeminarController_exhibitorLoginReminder",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/seminars/buyerLoginReminder": {
            "get": {
                "operationId": "SeminarController_buyerLoginReminder",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/seminars/dailyMeetingReminder": {
            "get": {
                "operationId": "SeminarController_dailyMeetingReminder",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/seminars/findUpcomingMeeingsOver15Min": {
            "get": {
                "operationId": "SeminarController_findUpcomingMeeingsOver15Min",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/seminars/attendingSeminarReminder": {
            "get": {
                "operationId": "SeminarController_attendingSeminarReminder",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/seminars/seminarSummaryReminder": {
            "get": {
                "operationId": "SeminarController_seminarSummaryReminder",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/seminars/noResponseInBmList": {
            "get": {
                "operationId": "SeminarController_noResponseInBmList",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/seminars/notEnoughInterestInBmList": {
            "get": {
                "operationId": "SeminarController_notEnoughInterestInBmList",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/seminars/getRegisteredSeminarsByUser": {
            "post": {
                "operationId": "SeminarController_getRegisteredSeminarsByUser",
                "parameters": [],
                "responses": {
                    "201": {
                        "description": ""
                    }
                }
            }
        },
        "/seminars/addCache": {
            "post": {
                "operationId": "SeminarController_addCache",
                "parameters": [],
                "responses": {
                    "201": {
                        "description": ""
                    }
                }
            }
        },
        "/seminars/deleteCache": {
            "post": {
                "operationId": "SeminarController_deleteCache",
                "parameters": [],
                "responses": {
                    "201": {
                        "description": ""
                    }
                }
            }
        },
        "/seminars/getCache": {
            "post": {
                "operationId": "SeminarController_getCache",
                "parameters": [],
                "responses": {
                    "201": {
                        "description": ""
                    }
                }
            }
        },
        "/seminars/getKeysByPattern": {
            "post": {
                "operationId": "SeminarController_getKeysByPattern",
                "parameters": [],
                "responses": {
                    "201": {
                        "description": ""
                    }
                }
            }
        },
        "/seminars/internal/saveSeminarRegistrationRecord": {
            "post": {
                "operationId": "SeminarInternalController_saveSeminarRegistrationRecord",
                "summary": "Seminar Event Registration in VEP DB",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Seminar Event Registration Success in VEP DB",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "status": 200
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Fail to register the event in VEP DB"
                    },
                    "500": {
                        "description": "System error"
                    }
                }
            }
        },
        "/profile/searchParticipantType": {
            "post": {
                "operationId": "ProfileController_searchParticipantType",
                "summary": "Function to Return Participant Type By Fair",
                "parameters": [
                    {
                        "name": "x-request-id",
                        "in": "header",
                        "description": "The Request ID for tracking is provided by API consumer",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ParticipantTypeSearchDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Return Exhibitor Participant Type",
                        "schema": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ParticipantTypeByFairListDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Profile"
                ]
            }
        },
        "/profile/searchParticipantTypeByFairDetails": {
            "post": {
                "operationId": "ProfileController_searchParticipantTypeByFairDetails",
                "summary": "Function to Return Participant Type By Fair",
                "parameters": [
                    {
                        "name": "x-request-id",
                        "in": "header",
                        "description": "The Request ID for tracking is provided by API consumer",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ParticipantTypeByFairDetailSearchDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Return Exhibitor Participant Type",
                        "schema": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ParticipantTypeByFairListDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Profile"
                ]
            }
        },
        "/profile/c2mUpdate/{fairCode}": {
            "put": {
                "operationId": "ProfileController_updateC2MProfile",
                "summary": "Function for c2m update buyer profile",
                "parameters": [
                    {
                        "name": "x-request-id",
                        "in": "header",
                        "description": "The Request ID for tracking is provided by API consumer",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fairCode",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-access-token",
                        "in": "header",
                        "description": "access token from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-sso-uid",
                        "in": "header",
                        "description": "sso uid from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-email-id",
                        "in": "header",
                        "description": "emailId from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-sso-firstname",
                        "in": "header",
                        "description": "first name from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-sso-lastname",
                        "in": "header",
                        "description": "last name from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateC2MProfileReqDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Return Update Result",
                        "schema": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateResultDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Profile"
                ]
            }
        },
        "/profile/updateFairParticipantRegistrationRecord": {
            "post": {
                "operationId": "ProfileController_updateFairParticipantRegistrationRecord",
                "summary": "Function to Update Fair Registration",
                "parameters": [
                    {
                        "name": "x-request-id",
                        "in": "header",
                        "description": "The Request ID for tracking is provided by API consumer",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-access-token",
                        "in": "header",
                        "description": "access token from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-sso-uid",
                        "in": "header",
                        "description": "sso uid from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-email-id",
                        "in": "header",
                        "description": "emailId from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-sso-firstname",
                        "in": "header",
                        "description": "first name from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-sso-lastname",
                        "in": "header",
                        "description": "last name from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateFairParticipantRegistrationRecordDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Return Update Result",
                        "schema": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateResultDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Profile"
                ]
            }
        },
        "/profile/shortFairRegistrations": {
            "post": {
                "operationId": "ProfileController_getShortRegistration",
                "parameters": [
                    {
                        "name": "x-request-id",
                        "in": "header",
                        "description": "The Request ID for tracking is provided by API consumer",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ParticipantRegistrationBySsouidsDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": ""
                    }
                },
                "tags": [
                    "Profile"
                ]
            }
        },
        "/profile/fairRegistrations": {
            "post": {
                "operationId": "ProfileController_getParticipantRegistrationDetail",
                "parameters": [
                    {
                        "name": "x-request-id",
                        "in": "header",
                        "description": "The Request ID for tracking is provided by API consumer",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ParticipantRegistrationBySsouidsDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": ""
                    }
                },
                "tags": [
                    "Profile"
                ]
            }
        },
        "/profile/combinedFairList": {
            "get": {
                "operationId": "ProfileController_getCombineFairList",
                "summary": "Get list of combined fair name, for user's registered record",
                "parameters": [
                    {
                        "name": "x-request-id",
                        "in": "header",
                        "description": "The Request ID for tracking is provided by API consumer",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-access-token",
                        "in": "header",
                        "description": "access token from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-sso-uid",
                        "in": "header",
                        "description": "sso uid from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-email-id",
                        "in": "header",
                        "description": "emailId from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-sso-firstname",
                        "in": "header",
                        "description": "first name from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-sso-lastname",
                        "in": "header",
                        "description": "last name from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return Update Result",
                        "schema": {
                            "example": [
                                null
                            ]
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GetCombinedFairListRespDto"
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Profile"
                ]
            }
        },
        "/profile/combinedFairData": {
            "get": {
                "operationId": "ProfileController_retrieveCombinedFairData",
                "summary": "Get list of combined fair name, for user's registered record",
                "parameters": [
                    {
                        "name": "x-request-id",
                        "in": "header",
                        "description": "The Request ID for tracking is provided by API consumer",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-access-token",
                        "in": "header",
                        "description": "access token from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-sso-uid",
                        "in": "header",
                        "description": "sso uid from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-email-id",
                        "in": "header",
                        "description": "emailId from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-sso-firstname",
                        "in": "header",
                        "description": "first name from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-sso-lastname",
                        "in": "header",
                        "description": "last name from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return Update Result",
                        "schema": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetCombinedFairListRespDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Profile"
                ]
            }
        },
        "/profile/formData": {
            "get": {
                "operationId": "ProfileController_retrieveProfileForFrontEnd",
                "summary": "Get Profile, return as form data json according to fairCode, lang and fair participant type",
                "parameters": [
                    {
                        "name": "x-request-id",
                        "in": "header",
                        "description": "The Request ID for tracking is provided by API consumer",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-access-token",
                        "in": "header",
                        "description": "access token from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-sso-uid",
                        "in": "header",
                        "description": "sso uid from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-email-id",
                        "in": "header",
                        "description": "emailId from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-sso-firstname",
                        "in": "header",
                        "description": "first name from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-sso-lastname",
                        "in": "header",
                        "description": "last name from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return Form Data Json with slug",
                        "schema": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProfileForEditRespDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Profile"
                ]
            },
            "put": {
                "operationId": "ProfileController_updateProfileByFormData",
                "summary": "Get Profile, return as form data json according to fairCode, lang and fair participant type",
                "parameters": [
                    {
                        "name": "x-request-id",
                        "in": "header",
                        "description": "The Request ID for tracking is provided by API consumer",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-access-token",
                        "in": "header",
                        "description": "access token from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-sso-uid",
                        "in": "header",
                        "description": "sso uid from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-email-id",
                        "in": "header",
                        "description": "emailId from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-sso-firstname",
                        "in": "header",
                        "description": "first name from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-sso-lastname",
                        "in": "header",
                        "description": "last name from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateProfileFrontendReqDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Return Form Data Json with slug",
                        "schema": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProfileForEditRespDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Profile"
                ]
            }
        },
        "/profile/presignedUrl": {
            "get": {
                "operationId": "ProfileController_getPresignedUrlPerUser",
                "summary": "Get presigned url per user",
                "parameters": [
                    {
                        "name": "x-request-id",
                        "in": "header",
                        "description": "The Request ID for tracking is provided by API consumer",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-access-token",
                        "in": "header",
                        "description": "access token from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-sso-uid",
                        "in": "header",
                        "description": "sso uid from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-email-id",
                        "in": "header",
                        "description": "emailId from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-sso-firstname",
                        "in": "header",
                        "description": "first name from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-sso-lastname",
                        "in": "header",
                        "description": "last name from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return Form Data Json with slug",
                        "schema": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProfileForEditRespDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Profile"
                ]
            }
        },
        "/profile/buyerDetailsForExhibitor": {
            "get": {
                "operationId": "ProfileController_getBuyerDetailsForExhibitor",
                "summary": "Get buyer details for exhibitor",
                "parameters": [
                    {
                        "name": "x-request-id",
                        "in": "header",
                        "description": "The Request ID for tracking is provided by API consumer",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-access-token",
                        "in": "header",
                        "description": "access token from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-sso-uid",
                        "in": "header",
                        "description": "sso uid from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-email-id",
                        "in": "header",
                        "description": "emailId from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-sso-firstname",
                        "in": "header",
                        "description": "first name from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-sso-lastname",
                        "in": "header",
                        "description": "last name from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return Update Result",
                        "schema": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetBuyerDetailsForExhbrRespDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Profile"
                ]
            }
        },
        "/profile/c2mQuestionInput": {
            "get": {
                "operationId": "ProfileController_getC2MQuestionInput",
                "parameters": [
                    {
                        "name": "x-request-id",
                        "in": "header",
                        "description": "The Request ID for tracking is provided by API consumer",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-access-token",
                        "in": "header",
                        "description": "access token from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-sso-uid",
                        "in": "header",
                        "description": "sso uid from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-email-id",
                        "in": "header",
                        "description": "emailId from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-sso-firstname",
                        "in": "header",
                        "description": "first name from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-sso-lastname",
                        "in": "header",
                        "description": "last name from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "tags": [
                    "Profile"
                ]
            }
        },
        "/profile/formProductInterestOptions": {
            "get": {
                "operationId": "ProfileController_getFormProductInterestOptions",
                "parameters": [
                    {
                        "name": "x-request-id",
                        "in": "header",
                        "description": "The Request ID for tracking is provided by API consumer",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-access-token",
                        "in": "header",
                        "description": "access token from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-sso-uid",
                        "in": "header",
                        "description": "sso uid from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-email-id",
                        "in": "header",
                        "description": "emailId from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-sso-firstname",
                        "in": "header",
                        "description": "first name from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-sso-lastname",
                        "in": "header",
                        "description": "last name from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "tags": [
                    "Profile"
                ]
            }
        },
        "/profile/updateProductInterest": {
            "put": {
                "operationId": "ProfileController_updateProductInterestPerFair",
                "parameters": [
                    {
                        "name": "x-request-id",
                        "in": "header",
                        "description": "The Request ID for tracking is provided by API consumer",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-access-token",
                        "in": "header",
                        "description": "access token from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-sso-uid",
                        "in": "header",
                        "description": "sso uid from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-email-id",
                        "in": "header",
                        "description": "emailId from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-sso-firstname",
                        "in": "header",
                        "description": "first name from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-sso-lastname",
                        "in": "header",
                        "description": "last name from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateProductInterestPerFairReqDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "tags": [
                    "Profile"
                ]
            }
        },
        "/profile/internal/fair/participants/{ssoUid}": {
            "get": {
                "operationId": "ProfileController_getFairParticipantInflencingDetail",
                "parameters": [
                    {
                        "name": "x-request-id",
                        "in": "header",
                        "description": "The Request ID for tracking is provided by API consumer",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ssoUid",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "tags": [
                    "Profile"
                ]
            }
        },
        "/profile/internal/fair/participants/{ssoUid}/emailId/{emailId}/link": {
            "put": {
                "operationId": "ProfileController_linkFairParticipantSsoUidByEmailId",
                "parameters": [
                    {
                        "name": "x-request-id",
                        "in": "header",
                        "description": "The Request ID for tracking is provided by API consumer",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ssoUid",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "emailId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "tags": [
                    "Profile"
                ]
            }
        },
        "/profile/c2m-excluded-participants": {
            "get": {
                "operationId": "ProfileController_searchC2mExcludedParticipants",
                "parameters": [
                    {
                        "name": "x-request-id",
                        "in": "header",
                        "description": "The Request ID for tracking is provided by API consumer",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "tags": [
                    "Profile"
                ]
            }
        },
        "/profile/getFairParticipantsProfileWithCombinedFair": {
            "get": {
                "operationId": "ProfileController_getFairParticipantsProfileWithCombinedFair",
                "parameters": [
                    {
                        "name": "x-request-id",
                        "in": "header",
                        "description": "The Request ID for tracking is provided by API consumer",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "tags": [
                    "Profile"
                ]
            }
        },
        "/admin/v1/profile/formData/{registrationRecordId}": {
            "get": {
                "operationId": "ProfileAdminController_retrieveProfileForBackendEdit",
                "parameters": [
                    {
                        "name": "x-request-id",
                        "in": "header",
                        "description": "The Request ID for tracking is provided by API consumer",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "registrationRecordId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "tags": [
                    "AdminProfile"
                ]
            },
            "put": {
                "operationId": "ProfileAdminController_adminUpdateProfileByFormData",
                "parameters": [
                    {
                        "name": "x-request-id",
                        "in": "header",
                        "description": "The Request ID for tracking is provided by API consumer",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "registrationRecordId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateProfileBackendReqDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "tags": [
                    "AdminProfile"
                ]
            }
        },
        "/admin/v1/profile/presignedUrl/{registrationRecordId}": {
            "get": {
                "operationId": "ProfileAdminController_adminGetPresignedUrlPerUser",
                "parameters": [
                    {
                        "name": "x-request-id",
                        "in": "header",
                        "description": "The Request ID for tracking is provided by API consumer",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "registrationRecordId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "tags": [
                    "AdminProfile"
                ]
            }
        },
        "/captcha/captcha-verify": {
            "post": {
                "operationId": "CaptchaController_validateCaptcha",
                "summary": "Validating the incoming request with captcha",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CaptchaDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response: Ticket is valid",
                        "schema": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CaptchaSuccessfulResponseDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Captcha"
                ]
            }
        },
        "/registration/{registrationRecordId}/c2m-participant-status": {
            "put": {
                "operationId": "RegistrationController_updateCToMParticipantStatus",
                "summary": "Update the c2m participant status by Id",
                "parameters": [
                    {
                        "name": "registrationRecordId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/C2MParticipantStatusDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "tags": [
                    "Registration"
                ]
            }
        },
        "/registration/c2m-participant-status": {
            "put": {
                "operationId": "RegistrationController_updateCToMParticipantStatusList",
                "summary": "Update the c2m participant status by List",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/C2MParticipantStatusListDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "tags": [
                    "Registration"
                ]
            }
        },
        "/registration/eligibility": {
            "post": {
                "operationId": "RegistrationController_checkEligibility",
                "summary": "Check if the user is eligible to register the fair",
                "parameters": [
                    {
                        "name": "x-trace-id",
                        "in": "header",
                        "description": "Trace ID for tracking is provided by API consumer",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-request-id",
                        "in": "header",
                        "description": "Request ID for tracking is provided by API consumer",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-sso-lastname",
                        "in": "header",
                        "description": "x-sso-lastname",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-sso-firstname",
                        "in": "header",
                        "description": "first name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-email-id",
                        "in": "header",
                        "description": "email Id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-access-token",
                        "in": "header",
                        "description": "access token",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-sso-uid",
                        "in": "header",
                        "description": "sso uid from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RegistrationRequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response: Returned Fair Setting Details to check if the Fair Registration is enabled or disabled",
                        "schema": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FairSettingSuccessfulResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error",
                        "schema": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorResponseDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Registration"
                ]
            }
        },
        "/registration/eligibilityV2": {
            "post": {
                "operationId": "RegistrationController_checkEligibilityV2",
                "summary": "Check if the user is eligible to register the fair",
                "parameters": [
                    {
                        "name": "x-trace-id",
                        "in": "header",
                        "description": "Trace ID for tracking is provided by API consumer",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-request-id",
                        "in": "header",
                        "description": "Request ID for tracking is provided by API consumer",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-sso-lastname",
                        "in": "header",
                        "description": "x-sso-lastname",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-sso-firstname",
                        "in": "header",
                        "description": "first name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-email-id",
                        "in": "header",
                        "description": "email Id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-access-token",
                        "in": "header",
                        "description": "access token",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-sso-uid",
                        "in": "header",
                        "description": "sso uid from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RegistrationRequestV2Dto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response: Returned Fair Setting Details to check if the Fair Registration is enabled or disabled",
                        "schema": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FairSettingSuccessfulResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error",
                        "schema": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorResponseDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Registration"
                ]
            }
        },
        "/registration/submitForm": {
            "put": {
                "operationId": "RegistrationController_submitForm",
                "summary": "Endpoint for form validation and form submit",
                "parameters": [
                    {
                        "name": "x-forwarded-for",
                        "required": true,
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-sso-uid",
                        "in": "header",
                        "description": "sso uid from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SubmitFormRequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Response : return validation result/ submit result",
                        "schema": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SubmitFormResponseDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Registration"
                ]
            }
        },
        "/registration/submitAORForm": {
            "put": {
                "operationId": "RegistrationController_submitAORForm",
                "summary": "Endpoint for aor form validation and submit",
                "parameters": [
                    {
                        "name": "x-forwarded-for",
                        "required": true,
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-sso-uid",
                        "in": "header",
                        "description": "sso uid from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SubmitAORFormRequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Response : return validation result/ submit result",
                        "schema": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SubmitAORFormResponseDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Registration"
                ]
            }
        },
        "/registration/submitCombinedFairForm": {
            "put": {
                "operationId": "RegistrationController_submitCombinedFairForm",
                "summary": "Endpoint for combinedFair form validation and submit",
                "parameters": [
                    {
                        "name": "x-forwarded-for",
                        "required": true,
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-sso-uid",
                        "in": "header",
                        "description": "sso uid from jwt payload (data source: sso)",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SubmitCombinedFairFormRequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Response : return validation result/ submit result",
                        "schema": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SubmitCombinedFairFormResponseDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Registration"
                ]
            }
        },
        "/registration/submitShortRegistration": {
            "put": {
                "operationId": "RegistrationController_submitShortRegistration",
                "summary": "Endpoint for short form registration",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SubmitShortRegReqDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Response : return validation result/ submit result",
                        "schema": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SubmitShortRegRespDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Registration"
                ]
            }
        },
        "/registration/{registrationRecordId}/registration-status": {
            "put": {
                "operationId": "RegistrationController_updateStatus",
                "summary": "Update fair participant (Buyer) registration status",
                "parameters": [
                    {
                        "name": "registrationRecordId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateRegistrationStatusRequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateRegistrationStatusResponseDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Registration"
                ]
            }
        },
        "/registration/registration-status": {
            "put": {
                "operationId": "RegistrationController_bulkUpdateStatus",
                "summary": "Bulk update fair participant (Buyer) registration status",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BulkUpdateRegistrationStatusRequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateRegistrationStatusResponseDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Registration"
                ]
            }
        },
        "/registration/{registrationRecordId}": {
            "put": {
                "operationId": "RegistrationController_updateFairRegistrationById",
                "summary": "update remark of fair registration by Id",
                "parameters": [
                    {
                        "name": "registrationRecordId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FairRegistrationRemarkReqDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "tags": [
                    "Registration"
                ]
            }
        },
        "/registration/verifyRegFormLink": {
            "get": {
                "operationId": "RegistrationController_verifyRegFormLink",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "tags": [
                    "Registration"
                ]
            }
        },
        "/registration/generateRegFormLink": {
            "post": {
                "operationId": "RegistrationController_generateRegFormLink",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GenerateRegFormLinkReqDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": ""
                    }
                },
                "tags": [
                    "Registration"
                ]
            }
        },
        "/registration/queryRegFormLink": {
            "get": {
                "operationId": "RegistrationController_queryRegFormLink",
                "summary": "Return the list of Reg Form Link Task",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Successful Response: Return the list of Reg Form Link Task"
                    }
                },
                "tags": [
                    "Registration"
                ]
            }
        },
        "/registration/countRegFormLink": {
            "get": {
                "operationId": "RegistrationController_countRegFormLink",
                "summary": "Return the number of Reg Form Link Task",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "tags": [
                    "Registration"
                ]
            }
        },
        "/registration/invalidate-registration": {
            "post": {
                "operationId": "RegistrationController_invalidateRegistration",
                "summary": "invalidate fair registration, endpoint for eoa api",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvalidateRegistrationReqDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": ""
                    }
                },
                "tags": [
                    "Registration"
                ]
            }
        },
        "/registration/uploadFilePresignedUrl": {
            "get": {
                "operationId": "RegistrationController_getUploadFilePresignedUrl",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "tags": [
                    "Registration"
                ]
            }
        },
        "/cache-control//{key}": {
            "get": {
                "operationId": "CacheControlController_getCacheByKey",
                "parameters": [
                    {
                        "name": "key",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "tags": [
                    "Cache Control API"
                ]
            },
            "put": {
                "operationId": "CacheControlController_setCacheByKey",
                "parameters": [
                    {
                        "name": "key",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "tags": [
                    "Cache Control API"
                ]
            }
        },
        "/cache-control//all": {
            "delete": {
                "operationId": "CacheControlController_clearAllCache",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "tags": [
                    "Cache Control API"
                ]
            }
        },
        "/form/uploadFilePresignedUrl": {
            "get": {
                "operationId": "FormController_getUploadFilePresignedUrl",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/form/submissionKey": {
            "get": {
                "operationId": "FormController_getFormSubmissionKey",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/customForm/submit": {
            "put": {
                "operationId": "CustomFormController_submitCustomForm",
                "parameters": [
                    {
                        "name": "x-forwarded-for",
                        "required": true,
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SubmitCustomFormReqDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/enquiryForm/submit": {
            "put": {
                "operationId": "EnquiryFormController_submitEnquiryForm",
                "parameters": [
                    {
                        "name": "x-forwarded-for",
                        "required": true,
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SubmitEnquiryFormReqDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/v1/buyerimport/task/{taskId}/status": {
            "put": {
                "operationId": "BuyerImportController_updateRegistrationTaskStatus",
                "summary": "Update the task status",
                "parameters": [
                    {
                        "name": "taskId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BuyerImportUpdateRequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response: Returned status",
                        "schema": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuyerImportRegistrationResponseDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Buyer Upload Service API"
                ]
            }
        },
        "/v1/buyerimport/task": {
            "get": {
                "operationId": "BuyerImportController_getBuyerImportTasks",
                "summary": "Return the list of Buyer Import Task",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Successful Response: Return the list of Buyer Import Task",
                        "schema": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuyerImportRegistrationResponseDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Buyer Upload Service API"
                ]
            },
            "post": {
                "operationId": "BuyerImportController_createBuyerImportTask",
                "summary": "Create a Buyer Import task in DB",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BuyerImportCreateTaskRequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response: Return the newly-added record",
                        "schema": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuyerImportRegistrationResponseDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Buyer Upload Service API"
                ]
            }
        },
        "/v1/buyerimport/task/{taskId}/failureReportUrl": {
            "get": {
                "operationId": "BuyerImportController_getFailureReportUrl",
                "parameters": [
                    {
                        "name": "taskId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "tags": [
                    "Buyer Upload Service API"
                ]
            }
        },
        "/v1/buyerimport/task/{taskId}/originalFileUrl": {
            "get": {
                "operationId": "BuyerImportController_getOriginalFilePresignedUrl",
                "parameters": [
                    {
                        "name": "taskId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "tags": [
                    "Buyer Upload Service API"
                ]
            }
        },
        "/v1/buyerimport/task/vepTemplateFileUrl": {
            "get": {
                "operationId": "BuyerImportController_getVepBuyerTemplateDownloadUrl",
                "parameters": [
                    {
                        "name": "actionType",
                        "required": true,
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "tags": [
                    "Buyer Upload Service API"
                ]
            }
        },
        "/v1/buyerimport/task/timeout": {
            "get": {
                "operationId": "BuyerImportController_getTimedoutTasks",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "tags": [
                    "Buyer Upload Service API"
                ]
            }
        },
        "/v1/buyerimport/task/setTimeout": {
            "get": {
                "operationId": "BuyerImportController_setTimeout",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "tags": [
                    "Buyer Upload Service API"
                ]
            }
        },
        "/v1/buyerimport/task/visitorToParticipantMapping": {
            "get": {
                "operationId": "BuyerImportController_getVisitorTypeToParticipantTypeMapping",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Successful Response: Return the map for the relationship between Visitor Type and Participant Type",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "21": {
                                            "participantType": 2,
                                            "formType": {
                                                "cip_buyer": "CIP"
                                            },
                                            "tier": "",
                                            "displayName": "VIP - CIP Buyer",
                                            "visitorDisplayName": "21 - VP - Sponsored Buyer"
                                        },
                                        "24": {
                                            "participantType": 3,
                                            "formType": {
                                                "mission_buyer": "Mission"
                                            },
                                            "tier": "",
                                            "displayName": "VIP - Mission Buyer",
                                            "visitorDisplayName": "24 - Sponsorship - Hosted Guest (3 Nights)"
                                        },
                                        "00": {
                                            "participantType": 1,
                                            "formType": {
                                                "organic_buyer": "Organic",
                                                "aor": "AOR",
                                                "seminar_long": "Seminar Long Form"
                                            },
                                            "tier": "GENERAL",
                                            "displayName": "Organic Buyer - General",
                                            "visitorDisplayName": "00 - Onsite Registered Visitor"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Buyer Upload Service API"
                ]
            }
        },
        "/v1/buyerimport/task/getNextSerialNumber": {
            "get": {
                "operationId": "BuyerImportController_getNextSerialNumber",
                "summary": "Get next serial Number by fairCode, projectYear, sourceType and visitorType",
                "parameters": [
                    {
                        "name": "fairCode",
                        "required": true,
                        "in": "query",
                        "description": "fairCode",
                        "example": "hkjewellery",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectYear",
                        "required": true,
                        "in": "query",
                        "description": "projectYear",
                        "example": "2021",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sourceType",
                        "required": true,
                        "in": "query",
                        "description": "sourceType",
                        "example": "08",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "visitorType",
                        "required": true,
                        "in": "query",
                        "description": "visitorType",
                        "example": "01",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response: Returned status",
                        "schema": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetNextSerialNumberResponseDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Buyer Upload Service API"
                ]
            }
        },
        "/participant": {
            "get": {
                "operationId": "ParticipantImportController_participantIndex",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "tags": [
                    "Participant Upload Service API"
                ]
            }
        },
        "/participant/v1/import-ors": {
            "post": {
                "operationId": "ParticipantImportController_createParticipantImportTask",
                "summary": "Participant Import for ORS",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ORSParticipantImportRequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response: Return success message",
                        "schema": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ORSParticipantImportResponseDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Participant Upload Service API"
                ]
            }
        },
        "/participant/v2/import-ors": {
            "post": {
                "operationId": "ParticipantImportController_createParticipantImportTaskR1AB2",
                "summary": "Participant Import for ORS",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ORSParticipantImportV2RequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response: Return success message",
                        "schema": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ORSParticipantImportResponseDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Participant Upload Service API"
                ]
            }
        },
        "/admin/v1/fair/customQuestions/import": {
            "get": {
                "operationId": "CustomQuestionsController_getCustomQuestionsImportTasks",
                "summary": "Return the list of Custom Questions Import Task",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Successful Response: Return the list of Custom Questions Import Task",
                        "schema": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomQuestionImportResponseDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Custom Questions Service API"
                ]
            },
            "post": {
                "operationId": "CustomQuestionsController_postCustomQuestionsImportTask",
                "summary": "Create a Custom Question Import Task in DB",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PostCustomQuestionImportReqDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response: Return the newly-added record",
                        "schema": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PostCustomQuestionImportResDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Custom Questions Service API"
                ]
            }
        },
        "/admin/v1/fair/customQuestions/{taskId}/trigger": {
            "get": {
                "operationId": "CustomQuestionsController_triggerSqsMessage",
                "summary": "Trigger SQS send import event",
                "parameters": [
                    {
                        "name": "taskId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response: Return success message"
                    }
                },
                "tags": [
                    "Custom Questions Service API"
                ]
            }
        },
        "/admin/v1/fair/customQuestions/customQuestionTemplateFileUrl": {
            "get": {
                "operationId": "CustomQuestionsController_getCustomQuestionTemplateDownloadUrl",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "tags": [
                    "Custom Questions Service API"
                ]
            }
        },
        "/admin/v1/fair/customQuestions": {
            "get": {
                "operationId": "CustomQuestionsController_getCustomQuestionsByFilters",
                "summary": "Return the list of Custom Questions",
                "parameters": [
                    {
                        "name": "fairCode",
                        "required": true,
                        "in": "query",
                        "description": "Fair Code",
                        "example": "hkjewellery",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectYear",
                        "required": true,
                        "in": "query",
                        "description": "Project Year",
                        "example": "2021",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sortBy",
                        "required": true,
                        "in": "query",
                        "description": "Sorting Field",
                        "example": "questionNum-",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "order",
                        "required": true,
                        "in": "query",
                        "description": "Order Direction, default ASC",
                        "example": "DESC",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response: Return the list of Custom Questions",
                        "schema": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomQuestionResponseDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Custom Questions Service API"
                ]
            }
        },
        "/admin/v1/fair/customQuestions/filterLabelList": {
            "get": {
                "operationId": "CustomQuestionsController_getCustomQuestionsFilterLabelList",
                "summary": "Return Custom Questions Filter Label List",
                "parameters": [
                    {
                        "name": "fairCode",
                        "required": true,
                        "in": "query",
                        "description": "Fair Code",
                        "example": "hkjewellery",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "year",
                        "required": true,
                        "in": "query",
                        "description": "Year",
                        "example": "2021",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response: Return Custom Questions Filter Label List",
                        "schema": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomQuestionFilterResponseDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Custom Questions Service API"
                ]
            }
        },
        "/admin/v1/fair/customQuestions/filterLabel": {
            "get": {
                "operationId": "CustomQuestionsController_getCustomQuestionsFilterLabel",
                "summary": "Return Custom Questions Filter",
                "parameters": [
                    {
                        "name": "fairCode",
                        "required": true,
                        "in": "query",
                        "description": "Fair Code",
                        "example": "hkjewellery",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "year",
                        "required": true,
                        "in": "query",
                        "description": "Year",
                        "example": "2021",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response: Return Custom Questions Label and Filter",
                        "schema": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomQuestionFilterResponseDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Custom Questions Service API"
                ]
            },
            "post": {
                "operationId": "CustomQuestionsController_updateCustomQuestionsFilterLabel",
                "summary": "Update Custom Questions Filter Label",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateCustomQuestionsFilterLabelReqDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response: Updated Custom Questions Label and Filter"
                    }
                },
                "tags": [
                    "Custom Questions Service API"
                ]
            }
        },
        "/admin/v1/fair/customQuestions/{taskId}/failureReportUrl": {
            "get": {
                "operationId": "CustomQuestionsController_getFailureReportUrl",
                "parameters": [
                    {
                        "name": "taskId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "tags": [
                    "Custom Questions Service API"
                ]
            }
        },
        "/admin/v1/fair/customQuestions/{taskId}/originalFileUrl": {
            "get": {
                "operationId": "CustomQuestionsController_getOriginalFilePresignedUrl",
                "parameters": [
                    {
                        "name": "taskId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "tags": [
                    "Custom Questions Service API"
                ]
            }
        },
        "/health": {
            "get": {
                "operationId": "HealthController_dummy",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/rtmpScheduler/stopRtmpBySeminarEndTime": {
            "get": {
                "operationId": "RTMPSchedulerController_stopRtmpBySeminarEndTime",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/rtmpScheduler/updatePlaybackByExistingVODFile": {
            "get": {
                "operationId": "RTMPSchedulerController_updatePlaybackByExistingVODFile",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        }
    }
}